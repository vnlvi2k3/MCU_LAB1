
lab1_main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016f0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080017fc  080017fc  000117fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001820  08001820  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001820  08001820  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001820  08001820  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001820  08001820  00011820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001824  08001824  00011824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001828  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001834  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001834  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000314a  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000edd  00000000  00000000  0002317f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003d8  00000000  00000000  00024060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000350  00000000  00000000  00024438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015617  00000000  00000000  00024788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004638  00000000  00000000  00039d9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00079b81  00000000  00000000  0003e3d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b7f58  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d58  00000000  00000000  000b7fac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080017e4 	.word	0x080017e4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080017e4 	.word	0x080017e4

0800014c <display7SEG>:
		  GPIO_TypeDef* SEG1_GPIO_Port, uint16_t SEG1_Pin,
		  GPIO_TypeDef* SEG2_GPIO_Port, uint16_t SEG2_Pin,
		  GPIO_TypeDef* SEG3_GPIO_Port, uint16_t SEG3_Pin,
		  GPIO_TypeDef* SEG4_GPIO_Port, uint16_t SEG4_Pin,
		  GPIO_TypeDef* SEG5_GPIO_Port, uint16_t SEG5_Pin,
		  GPIO_TypeDef* SEG6_GPIO_Port, uint16_t SEG6_Pin){
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	603b      	str	r3, [r7, #0]
 8000158:	4613      	mov	r3, r2
 800015a:	80fb      	strh	r3, [r7, #6]
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	2b09      	cmp	r3, #9
 8000160:	f200 81d0 	bhi.w	8000504 <display7SEG+0x3b8>
 8000164:	a201      	add	r2, pc, #4	; (adr r2, 800016c <display7SEG+0x20>)
 8000166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800016a:	bf00      	nop
 800016c:	08000195 	.word	0x08000195
 8000170:	080001ed 	.word	0x080001ed
 8000174:	08000245 	.word	0x08000245
 8000178:	0800029d 	.word	0x0800029d
 800017c:	080002f5 	.word	0x080002f5
 8000180:	0800034d 	.word	0x0800034d
 8000184:	080003a5 	.word	0x080003a5
 8000188:	080003fd 	.word	0x080003fd
 800018c:	08000455 	.word	0x08000455
 8000190:	080004ad 	.word	0x080004ad

	switch(num){
	case 0:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 8000194:	88fb      	ldrh	r3, [r7, #6]
 8000196:	2200      	movs	r2, #0
 8000198:	4619      	mov	r1, r3
 800019a:	68b8      	ldr	r0, [r7, #8]
 800019c:	f000 ff02 	bl	8000fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 80001a0:	8b3b      	ldrh	r3, [r7, #24]
 80001a2:	2200      	movs	r2, #0
 80001a4:	4619      	mov	r1, r3
 80001a6:	6838      	ldr	r0, [r7, #0]
 80001a8:	f000 fefc 	bl	8000fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 80001ac:	8c3b      	ldrh	r3, [r7, #32]
 80001ae:	2200      	movs	r2, #0
 80001b0:	4619      	mov	r1, r3
 80001b2:	69f8      	ldr	r0, [r7, #28]
 80001b4:	f000 fef6 	bl	8000fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 80001b8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80001ba:	2200      	movs	r2, #0
 80001bc:	4619      	mov	r1, r3
 80001be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80001c0:	f000 fef0 	bl	8000fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 80001c4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80001c6:	2200      	movs	r2, #0
 80001c8:	4619      	mov	r1, r3
 80001ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80001cc:	f000 feea 	bl	8000fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 80001d0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80001d2:	2200      	movs	r2, #0
 80001d4:	4619      	mov	r1, r3
 80001d6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80001d8:	f000 fee4 	bl	8000fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_SET);
 80001dc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80001e0:	2201      	movs	r2, #1
 80001e2:	4619      	mov	r1, r3
 80001e4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80001e6:	f000 fedd 	bl	8000fa4 <HAL_GPIO_WritePin>
		break;
 80001ea:	e18c      	b.n	8000506 <display7SEG+0x3ba>
	case 1:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_SET);
 80001ec:	88fb      	ldrh	r3, [r7, #6]
 80001ee:	2201      	movs	r2, #1
 80001f0:	4619      	mov	r1, r3
 80001f2:	68b8      	ldr	r0, [r7, #8]
 80001f4:	f000 fed6 	bl	8000fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 80001f8:	8b3b      	ldrh	r3, [r7, #24]
 80001fa:	2200      	movs	r2, #0
 80001fc:	4619      	mov	r1, r3
 80001fe:	6838      	ldr	r0, [r7, #0]
 8000200:	f000 fed0 	bl	8000fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000204:	8c3b      	ldrh	r3, [r7, #32]
 8000206:	2200      	movs	r2, #0
 8000208:	4619      	mov	r1, r3
 800020a:	69f8      	ldr	r0, [r7, #28]
 800020c:	f000 feca 	bl	8000fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_SET);
 8000210:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000212:	2201      	movs	r2, #1
 8000214:	4619      	mov	r1, r3
 8000216:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000218:	f000 fec4 	bl	8000fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 800021c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800021e:	2201      	movs	r2, #1
 8000220:	4619      	mov	r1, r3
 8000222:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000224:	f000 febe 	bl	8000fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 8000228:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800022a:	2201      	movs	r2, #1
 800022c:	4619      	mov	r1, r3
 800022e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000230:	f000 feb8 	bl	8000fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_SET);
 8000234:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000238:	2201      	movs	r2, #1
 800023a:	4619      	mov	r1, r3
 800023c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800023e:	f000 feb1 	bl	8000fa4 <HAL_GPIO_WritePin>
		break;
 8000242:	e160      	b.n	8000506 <display7SEG+0x3ba>
	case 2:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 8000244:	88fb      	ldrh	r3, [r7, #6]
 8000246:	2200      	movs	r2, #0
 8000248:	4619      	mov	r1, r3
 800024a:	68b8      	ldr	r0, [r7, #8]
 800024c:	f000 feaa 	bl	8000fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000250:	8b3b      	ldrh	r3, [r7, #24]
 8000252:	2200      	movs	r2, #0
 8000254:	4619      	mov	r1, r3
 8000256:	6838      	ldr	r0, [r7, #0]
 8000258:	f000 fea4 	bl	8000fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_SET);
 800025c:	8c3b      	ldrh	r3, [r7, #32]
 800025e:	2201      	movs	r2, #1
 8000260:	4619      	mov	r1, r3
 8000262:	69f8      	ldr	r0, [r7, #28]
 8000264:	f000 fe9e 	bl	8000fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000268:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800026a:	2200      	movs	r2, #0
 800026c:	4619      	mov	r1, r3
 800026e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000270:	f000 fe98 	bl	8000fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 8000274:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000276:	2200      	movs	r2, #0
 8000278:	4619      	mov	r1, r3
 800027a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800027c:	f000 fe92 	bl	8000fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 8000280:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000282:	2201      	movs	r2, #1
 8000284:	4619      	mov	r1, r3
 8000286:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000288:	f000 fe8c 	bl	8000fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 800028c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000290:	2200      	movs	r2, #0
 8000292:	4619      	mov	r1, r3
 8000294:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000296:	f000 fe85 	bl	8000fa4 <HAL_GPIO_WritePin>
		break;
 800029a:	e134      	b.n	8000506 <display7SEG+0x3ba>
	case 3:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 800029c:	88fb      	ldrh	r3, [r7, #6]
 800029e:	2200      	movs	r2, #0
 80002a0:	4619      	mov	r1, r3
 80002a2:	68b8      	ldr	r0, [r7, #8]
 80002a4:	f000 fe7e 	bl	8000fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 80002a8:	8b3b      	ldrh	r3, [r7, #24]
 80002aa:	2200      	movs	r2, #0
 80002ac:	4619      	mov	r1, r3
 80002ae:	6838      	ldr	r0, [r7, #0]
 80002b0:	f000 fe78 	bl	8000fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 80002b4:	8c3b      	ldrh	r3, [r7, #32]
 80002b6:	2200      	movs	r2, #0
 80002b8:	4619      	mov	r1, r3
 80002ba:	69f8      	ldr	r0, [r7, #28]
 80002bc:	f000 fe72 	bl	8000fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 80002c0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80002c2:	2200      	movs	r2, #0
 80002c4:	4619      	mov	r1, r3
 80002c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80002c8:	f000 fe6c 	bl	8000fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 80002cc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80002ce:	2201      	movs	r2, #1
 80002d0:	4619      	mov	r1, r3
 80002d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80002d4:	f000 fe66 	bl	8000fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 80002d8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80002da:	2201      	movs	r2, #1
 80002dc:	4619      	mov	r1, r3
 80002de:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80002e0:	f000 fe60 	bl	8000fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 80002e4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80002e8:	2200      	movs	r2, #0
 80002ea:	4619      	mov	r1, r3
 80002ec:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80002ee:	f000 fe59 	bl	8000fa4 <HAL_GPIO_WritePin>
		break;
 80002f2:	e108      	b.n	8000506 <display7SEG+0x3ba>
	case 4:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_SET);
 80002f4:	88fb      	ldrh	r3, [r7, #6]
 80002f6:	2201      	movs	r2, #1
 80002f8:	4619      	mov	r1, r3
 80002fa:	68b8      	ldr	r0, [r7, #8]
 80002fc:	f000 fe52 	bl	8000fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000300:	8b3b      	ldrh	r3, [r7, #24]
 8000302:	2200      	movs	r2, #0
 8000304:	4619      	mov	r1, r3
 8000306:	6838      	ldr	r0, [r7, #0]
 8000308:	f000 fe4c 	bl	8000fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 800030c:	8c3b      	ldrh	r3, [r7, #32]
 800030e:	2200      	movs	r2, #0
 8000310:	4619      	mov	r1, r3
 8000312:	69f8      	ldr	r0, [r7, #28]
 8000314:	f000 fe46 	bl	8000fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_SET);
 8000318:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800031a:	2201      	movs	r2, #1
 800031c:	4619      	mov	r1, r3
 800031e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000320:	f000 fe40 	bl	8000fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 8000324:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000326:	2201      	movs	r2, #1
 8000328:	4619      	mov	r1, r3
 800032a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800032c:	f000 fe3a 	bl	8000fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8000330:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000332:	2200      	movs	r2, #0
 8000334:	4619      	mov	r1, r3
 8000336:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000338:	f000 fe34 	bl	8000fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 800033c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000340:	2200      	movs	r2, #0
 8000342:	4619      	mov	r1, r3
 8000344:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000346:	f000 fe2d 	bl	8000fa4 <HAL_GPIO_WritePin>
		break;
 800034a:	e0dc      	b.n	8000506 <display7SEG+0x3ba>
	case 5:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 800034c:	88fb      	ldrh	r3, [r7, #6]
 800034e:	2200      	movs	r2, #0
 8000350:	4619      	mov	r1, r3
 8000352:	68b8      	ldr	r0, [r7, #8]
 8000354:	f000 fe26 	bl	8000fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_SET);
 8000358:	8b3b      	ldrh	r3, [r7, #24]
 800035a:	2201      	movs	r2, #1
 800035c:	4619      	mov	r1, r3
 800035e:	6838      	ldr	r0, [r7, #0]
 8000360:	f000 fe20 	bl	8000fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000364:	8c3b      	ldrh	r3, [r7, #32]
 8000366:	2200      	movs	r2, #0
 8000368:	4619      	mov	r1, r3
 800036a:	69f8      	ldr	r0, [r7, #28]
 800036c:	f000 fe1a 	bl	8000fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000370:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000372:	2200      	movs	r2, #0
 8000374:	4619      	mov	r1, r3
 8000376:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000378:	f000 fe14 	bl	8000fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 800037c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800037e:	2201      	movs	r2, #1
 8000380:	4619      	mov	r1, r3
 8000382:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000384:	f000 fe0e 	bl	8000fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8000388:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800038a:	2200      	movs	r2, #0
 800038c:	4619      	mov	r1, r3
 800038e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000390:	f000 fe08 	bl	8000fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8000394:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000398:	2200      	movs	r2, #0
 800039a:	4619      	mov	r1, r3
 800039c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800039e:	f000 fe01 	bl	8000fa4 <HAL_GPIO_WritePin>
		break;
 80003a2:	e0b0      	b.n	8000506 <display7SEG+0x3ba>
	case 6:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 80003a4:	88fb      	ldrh	r3, [r7, #6]
 80003a6:	2200      	movs	r2, #0
 80003a8:	4619      	mov	r1, r3
 80003aa:	68b8      	ldr	r0, [r7, #8]
 80003ac:	f000 fdfa 	bl	8000fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_SET);
 80003b0:	8b3b      	ldrh	r3, [r7, #24]
 80003b2:	2201      	movs	r2, #1
 80003b4:	4619      	mov	r1, r3
 80003b6:	6838      	ldr	r0, [r7, #0]
 80003b8:	f000 fdf4 	bl	8000fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 80003bc:	8c3b      	ldrh	r3, [r7, #32]
 80003be:	2200      	movs	r2, #0
 80003c0:	4619      	mov	r1, r3
 80003c2:	69f8      	ldr	r0, [r7, #28]
 80003c4:	f000 fdee 	bl	8000fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 80003c8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80003ca:	2200      	movs	r2, #0
 80003cc:	4619      	mov	r1, r3
 80003ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80003d0:	f000 fde8 	bl	8000fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 80003d4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80003d6:	2200      	movs	r2, #0
 80003d8:	4619      	mov	r1, r3
 80003da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80003dc:	f000 fde2 	bl	8000fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 80003e0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80003e2:	2200      	movs	r2, #0
 80003e4:	4619      	mov	r1, r3
 80003e6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80003e8:	f000 fddc 	bl	8000fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 80003ec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80003f0:	2200      	movs	r2, #0
 80003f2:	4619      	mov	r1, r3
 80003f4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80003f6:	f000 fdd5 	bl	8000fa4 <HAL_GPIO_WritePin>
		break;
 80003fa:	e084      	b.n	8000506 <display7SEG+0x3ba>
	case 7:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 80003fc:	88fb      	ldrh	r3, [r7, #6]
 80003fe:	2200      	movs	r2, #0
 8000400:	4619      	mov	r1, r3
 8000402:	68b8      	ldr	r0, [r7, #8]
 8000404:	f000 fdce 	bl	8000fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000408:	8b3b      	ldrh	r3, [r7, #24]
 800040a:	2200      	movs	r2, #0
 800040c:	4619      	mov	r1, r3
 800040e:	6838      	ldr	r0, [r7, #0]
 8000410:	f000 fdc8 	bl	8000fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000414:	8c3b      	ldrh	r3, [r7, #32]
 8000416:	2200      	movs	r2, #0
 8000418:	4619      	mov	r1, r3
 800041a:	69f8      	ldr	r0, [r7, #28]
 800041c:	f000 fdc2 	bl	8000fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_SET);
 8000420:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000422:	2201      	movs	r2, #1
 8000424:	4619      	mov	r1, r3
 8000426:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000428:	f000 fdbc 	bl	8000fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 800042c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800042e:	2201      	movs	r2, #1
 8000430:	4619      	mov	r1, r3
 8000432:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000434:	f000 fdb6 	bl	8000fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 8000438:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800043a:	2201      	movs	r2, #1
 800043c:	4619      	mov	r1, r3
 800043e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000440:	f000 fdb0 	bl	8000fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_SET);
 8000444:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000448:	2201      	movs	r2, #1
 800044a:	4619      	mov	r1, r3
 800044c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800044e:	f000 fda9 	bl	8000fa4 <HAL_GPIO_WritePin>
		break;
 8000452:	e058      	b.n	8000506 <display7SEG+0x3ba>
	case 8:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 8000454:	88fb      	ldrh	r3, [r7, #6]
 8000456:	2200      	movs	r2, #0
 8000458:	4619      	mov	r1, r3
 800045a:	68b8      	ldr	r0, [r7, #8]
 800045c:	f000 fda2 	bl	8000fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000460:	8b3b      	ldrh	r3, [r7, #24]
 8000462:	2200      	movs	r2, #0
 8000464:	4619      	mov	r1, r3
 8000466:	6838      	ldr	r0, [r7, #0]
 8000468:	f000 fd9c 	bl	8000fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 800046c:	8c3b      	ldrh	r3, [r7, #32]
 800046e:	2200      	movs	r2, #0
 8000470:	4619      	mov	r1, r3
 8000472:	69f8      	ldr	r0, [r7, #28]
 8000474:	f000 fd96 	bl	8000fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000478:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800047a:	2200      	movs	r2, #0
 800047c:	4619      	mov	r1, r3
 800047e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000480:	f000 fd90 	bl	8000fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 8000484:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000486:	2200      	movs	r2, #0
 8000488:	4619      	mov	r1, r3
 800048a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800048c:	f000 fd8a 	bl	8000fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8000490:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000492:	2200      	movs	r2, #0
 8000494:	4619      	mov	r1, r3
 8000496:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000498:	f000 fd84 	bl	8000fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 800049c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80004a0:	2200      	movs	r2, #0
 80004a2:	4619      	mov	r1, r3
 80004a4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80004a6:	f000 fd7d 	bl	8000fa4 <HAL_GPIO_WritePin>
		break;
 80004aa:	e02c      	b.n	8000506 <display7SEG+0x3ba>
	case 9:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 80004ac:	88fb      	ldrh	r3, [r7, #6]
 80004ae:	2200      	movs	r2, #0
 80004b0:	4619      	mov	r1, r3
 80004b2:	68b8      	ldr	r0, [r7, #8]
 80004b4:	f000 fd76 	bl	8000fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 80004b8:	8b3b      	ldrh	r3, [r7, #24]
 80004ba:	2200      	movs	r2, #0
 80004bc:	4619      	mov	r1, r3
 80004be:	6838      	ldr	r0, [r7, #0]
 80004c0:	f000 fd70 	bl	8000fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 80004c4:	8c3b      	ldrh	r3, [r7, #32]
 80004c6:	2200      	movs	r2, #0
 80004c8:	4619      	mov	r1, r3
 80004ca:	69f8      	ldr	r0, [r7, #28]
 80004cc:	f000 fd6a 	bl	8000fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 80004d0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80004d2:	2200      	movs	r2, #0
 80004d4:	4619      	mov	r1, r3
 80004d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80004d8:	f000 fd64 	bl	8000fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 80004dc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80004de:	2201      	movs	r2, #1
 80004e0:	4619      	mov	r1, r3
 80004e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80004e4:	f000 fd5e 	bl	8000fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 80004e8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80004ea:	2200      	movs	r2, #0
 80004ec:	4619      	mov	r1, r3
 80004ee:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80004f0:	f000 fd58 	bl	8000fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 80004f4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80004f8:	2200      	movs	r2, #0
 80004fa:	4619      	mov	r1, r3
 80004fc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80004fe:	f000 fd51 	bl	8000fa4 <HAL_GPIO_WritePin>
		break;
 8000502:	e000      	b.n	8000506 <display7SEG+0x3ba>
	default:
		break;
 8000504:	bf00      	nop
	}
}
 8000506:	bf00      	nop
 8000508:	3710      	adds	r7, #16
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop

08000510 <main>:
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b090      	sub	sp, #64	; 0x40
 8000514:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000516:	f000 fa61 	bl	80009dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051a:	f000 f943 	bl	80007a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051e:	f000 f97d 	bl	800081c <MX_GPIO_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  enum lightState {RED1_GREEN2, RED1_YELLOW2, GREEN1_RED2, YELLOW1_RED2,};
  enum lightState curr_state = RED1_GREEN2;
 8000522:	2300      	movs	r3, #0
 8000524:	73fb      	strb	r3, [r7, #15]
  enum lightState next_state = curr_state;
 8000526:	7bfb      	ldrb	r3, [r7, #15]
 8000528:	73bb      	strb	r3, [r7, #14]
  int l_count = 4, p_count = 2, count = 3;
 800052a:	2304      	movs	r3, #4
 800052c:	60bb      	str	r3, [r7, #8]
 800052e:	2302      	movs	r3, #2
 8000530:	607b      	str	r3, [r7, #4]
 8000532:	2303      	movs	r3, #3
 8000534:	603b      	str	r3, [r7, #0]
  HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, GPIO_PIN_SET);
 8000536:	2201      	movs	r2, #1
 8000538:	2102      	movs	r1, #2
 800053a:	4898      	ldr	r0, [pc, #608]	; (800079c <main+0x28c>)
 800053c:	f000 fd32 	bl	8000fa4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, GPIO_PIN_SET);
 8000540:	2201      	movs	r2, #1
 8000542:	2104      	movs	r1, #4
 8000544:	4895      	ldr	r0, [pc, #596]	; (800079c <main+0x28c>)
 8000546:	f000 fd2d 	bl	8000fa4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, GPIO_PIN_SET);
 800054a:	2201      	movs	r2, #1
 800054c:	2108      	movs	r1, #8
 800054e:	4893      	ldr	r0, [pc, #588]	; (800079c <main+0x28c>)
 8000550:	f000 fd28 	bl	8000fa4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, GPIO_PIN_SET);
 8000554:	2201      	movs	r2, #1
 8000556:	2110      	movs	r1, #16
 8000558:	4890      	ldr	r0, [pc, #576]	; (800079c <main+0x28c>)
 800055a:	f000 fd23 	bl	8000fa4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, GPIO_PIN_SET);
 800055e:	2201      	movs	r2, #1
 8000560:	2120      	movs	r1, #32
 8000562:	488e      	ldr	r0, [pc, #568]	; (800079c <main+0x28c>)
 8000564:	f000 fd1e 	bl	8000fa4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, GPIO_PIN_SET);
 8000568:	2201      	movs	r2, #1
 800056a:	2140      	movs	r1, #64	; 0x40
 800056c:	488b      	ldr	r0, [pc, #556]	; (800079c <main+0x28c>)
 800056e:	f000 fd19 	bl	8000fa4 <HAL_GPIO_WritePin>
   while (1)
   {
	   display7SEG(l_count, L0_GPIO_Port, L0_Pin,
 8000572:	2340      	movs	r3, #64	; 0x40
 8000574:	930a      	str	r3, [sp, #40]	; 0x28
 8000576:	4b8a      	ldr	r3, [pc, #552]	; (80007a0 <main+0x290>)
 8000578:	9309      	str	r3, [sp, #36]	; 0x24
 800057a:	2320      	movs	r3, #32
 800057c:	9308      	str	r3, [sp, #32]
 800057e:	4b88      	ldr	r3, [pc, #544]	; (80007a0 <main+0x290>)
 8000580:	9307      	str	r3, [sp, #28]
 8000582:	2310      	movs	r3, #16
 8000584:	9306      	str	r3, [sp, #24]
 8000586:	4b86      	ldr	r3, [pc, #536]	; (80007a0 <main+0x290>)
 8000588:	9305      	str	r3, [sp, #20]
 800058a:	2308      	movs	r3, #8
 800058c:	9304      	str	r3, [sp, #16]
 800058e:	4b84      	ldr	r3, [pc, #528]	; (80007a0 <main+0x290>)
 8000590:	9303      	str	r3, [sp, #12]
 8000592:	2304      	movs	r3, #4
 8000594:	9302      	str	r3, [sp, #8]
 8000596:	4b82      	ldr	r3, [pc, #520]	; (80007a0 <main+0x290>)
 8000598:	9301      	str	r3, [sp, #4]
 800059a:	2302      	movs	r3, #2
 800059c:	9300      	str	r3, [sp, #0]
 800059e:	4b80      	ldr	r3, [pc, #512]	; (80007a0 <main+0x290>)
 80005a0:	2201      	movs	r2, #1
 80005a2:	497f      	ldr	r1, [pc, #508]	; (80007a0 <main+0x290>)
 80005a4:	68b8      	ldr	r0, [r7, #8]
 80005a6:	f7ff fdd1 	bl	800014c <display7SEG>
			  L2_GPIO_Port, L2_Pin,
			  L3_GPIO_Port, L3_Pin,
			  L4_GPIO_Port, L4_Pin,
			  L5_GPIO_Port, L5_Pin,
			  L6_GPIO_Port, L6_Pin);
	   display7SEG(p_count, P0_GPIO_Port, P0_Pin,
 80005aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005ae:	930a      	str	r3, [sp, #40]	; 0x28
 80005b0:	4b7b      	ldr	r3, [pc, #492]	; (80007a0 <main+0x290>)
 80005b2:	9309      	str	r3, [sp, #36]	; 0x24
 80005b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005b8:	9308      	str	r3, [sp, #32]
 80005ba:	4b79      	ldr	r3, [pc, #484]	; (80007a0 <main+0x290>)
 80005bc:	9307      	str	r3, [sp, #28]
 80005be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80005c2:	9306      	str	r3, [sp, #24]
 80005c4:	4b76      	ldr	r3, [pc, #472]	; (80007a0 <main+0x290>)
 80005c6:	9305      	str	r3, [sp, #20]
 80005c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005cc:	9304      	str	r3, [sp, #16]
 80005ce:	4b74      	ldr	r3, [pc, #464]	; (80007a0 <main+0x290>)
 80005d0:	9303      	str	r3, [sp, #12]
 80005d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005d6:	9302      	str	r3, [sp, #8]
 80005d8:	4b71      	ldr	r3, [pc, #452]	; (80007a0 <main+0x290>)
 80005da:	9301      	str	r3, [sp, #4]
 80005dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005e0:	9300      	str	r3, [sp, #0]
 80005e2:	4b6f      	ldr	r3, [pc, #444]	; (80007a0 <main+0x290>)
 80005e4:	2280      	movs	r2, #128	; 0x80
 80005e6:	496e      	ldr	r1, [pc, #440]	; (80007a0 <main+0x290>)
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f7ff fdaf 	bl	800014c <display7SEG>
			  P2_GPIO_Port, P2_Pin,
			  P3_GPIO_Port, P3_Pin,
			  P4_GPIO_Port, P4_Pin,
			  P5_GPIO_Port, P5_Pin,
			  P6_GPIO_Port, P6_Pin);
	   if(count > 0) count --;
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	dd02      	ble.n	80005fa <main+0xea>
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	3b01      	subs	r3, #1
 80005f8:	603b      	str	r3, [r7, #0]
	   if(l_count > 0) l_count--;
 80005fa:	68bb      	ldr	r3, [r7, #8]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	dd02      	ble.n	8000606 <main+0xf6>
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	3b01      	subs	r3, #1
 8000604:	60bb      	str	r3, [r7, #8]
	   if(p_count > 0) p_count--;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	2b00      	cmp	r3, #0
 800060a:	dd02      	ble.n	8000612 <main+0x102>
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	3b01      	subs	r3, #1
 8000610:	607b      	str	r3, [r7, #4]
	  switch(curr_state){
 8000612:	7bfb      	ldrb	r3, [r7, #15]
 8000614:	2b03      	cmp	r3, #3
 8000616:	f200 80b0 	bhi.w	800077a <main+0x26a>
 800061a:	a201      	add	r2, pc, #4	; (adr r2, 8000620 <main+0x110>)
 800061c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000620:	08000631 	.word	0x08000631
 8000624:	08000683 	.word	0x08000683
 8000628:	080006d7 	.word	0x080006d7
 800062c:	08000727 	.word	0x08000727
	  case RED1_GREEN2:
		  HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, GPIO_PIN_RESET);
 8000630:	2200      	movs	r2, #0
 8000632:	2102      	movs	r1, #2
 8000634:	4859      	ldr	r0, [pc, #356]	; (800079c <main+0x28c>)
 8000636:	f000 fcb5 	bl	8000fa4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, GPIO_PIN_SET);
 800063a:	2201      	movs	r2, #1
 800063c:	2104      	movs	r1, #4
 800063e:	4857      	ldr	r0, [pc, #348]	; (800079c <main+0x28c>)
 8000640:	f000 fcb0 	bl	8000fa4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, GPIO_PIN_SET);
 8000644:	2201      	movs	r2, #1
 8000646:	2108      	movs	r1, #8
 8000648:	4854      	ldr	r0, [pc, #336]	; (800079c <main+0x28c>)
 800064a:	f000 fcab 	bl	8000fa4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, GPIO_PIN_SET);
 800064e:	2201      	movs	r2, #1
 8000650:	2110      	movs	r1, #16
 8000652:	4852      	ldr	r0, [pc, #328]	; (800079c <main+0x28c>)
 8000654:	f000 fca6 	bl	8000fa4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, GPIO_PIN_SET);
 8000658:	2201      	movs	r2, #1
 800065a:	2120      	movs	r1, #32
 800065c:	484f      	ldr	r0, [pc, #316]	; (800079c <main+0x28c>)
 800065e:	f000 fca1 	bl	8000fa4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, GPIO_PIN_RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	2140      	movs	r1, #64	; 0x40
 8000666:	484d      	ldr	r0, [pc, #308]	; (800079c <main+0x28c>)
 8000668:	f000 fc9c 	bl	8000fa4 <HAL_GPIO_WritePin>
		  if(count <= 0){
 800066c:	683b      	ldr	r3, [r7, #0]
 800066e:	2b00      	cmp	r3, #0
 8000670:	f300 8085 	bgt.w	800077e <main+0x26e>
			  next_state = RED1_YELLOW2;
 8000674:	2301      	movs	r3, #1
 8000676:	73bb      	strb	r3, [r7, #14]
			  count = 2;
 8000678:	2302      	movs	r3, #2
 800067a:	603b      	str	r3, [r7, #0]
			  p_count = 1;
 800067c:	2301      	movs	r3, #1
 800067e:	607b      	str	r3, [r7, #4]
		  }
		  break;
 8000680:	e07d      	b.n	800077e <main+0x26e>
	  case RED1_YELLOW2:
		  HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, GPIO_PIN_RESET);
 8000682:	2200      	movs	r2, #0
 8000684:	2102      	movs	r1, #2
 8000686:	4845      	ldr	r0, [pc, #276]	; (800079c <main+0x28c>)
 8000688:	f000 fc8c 	bl	8000fa4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, GPIO_PIN_SET);
 800068c:	2201      	movs	r2, #1
 800068e:	2104      	movs	r1, #4
 8000690:	4842      	ldr	r0, [pc, #264]	; (800079c <main+0x28c>)
 8000692:	f000 fc87 	bl	8000fa4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, GPIO_PIN_SET);
 8000696:	2201      	movs	r2, #1
 8000698:	2108      	movs	r1, #8
 800069a:	4840      	ldr	r0, [pc, #256]	; (800079c <main+0x28c>)
 800069c:	f000 fc82 	bl	8000fa4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, GPIO_PIN_SET);
 80006a0:	2201      	movs	r2, #1
 80006a2:	2110      	movs	r1, #16
 80006a4:	483d      	ldr	r0, [pc, #244]	; (800079c <main+0x28c>)
 80006a6:	f000 fc7d 	bl	8000fa4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, GPIO_PIN_RESET);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2120      	movs	r1, #32
 80006ae:	483b      	ldr	r0, [pc, #236]	; (800079c <main+0x28c>)
 80006b0:	f000 fc78 	bl	8000fa4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, GPIO_PIN_SET);
 80006b4:	2201      	movs	r2, #1
 80006b6:	2140      	movs	r1, #64	; 0x40
 80006b8:	4838      	ldr	r0, [pc, #224]	; (800079c <main+0x28c>)
 80006ba:	f000 fc73 	bl	8000fa4 <HAL_GPIO_WritePin>
		  if(count <= 0){
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	dc5e      	bgt.n	8000782 <main+0x272>
			  next_state = GREEN1_RED2;
 80006c4:	2302      	movs	r3, #2
 80006c6:	73bb      	strb	r3, [r7, #14]
			  count = 3;
 80006c8:	2303      	movs	r3, #3
 80006ca:	603b      	str	r3, [r7, #0]
			  l_count = 2;
 80006cc:	2302      	movs	r3, #2
 80006ce:	60bb      	str	r3, [r7, #8]
			  p_count = 4;
 80006d0:	2304      	movs	r3, #4
 80006d2:	607b      	str	r3, [r7, #4]
		  }
		  break;
 80006d4:	e055      	b.n	8000782 <main+0x272>
	  case GREEN1_RED2:
		  HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, GPIO_PIN_SET);
 80006d6:	2201      	movs	r2, #1
 80006d8:	2102      	movs	r1, #2
 80006da:	4830      	ldr	r0, [pc, #192]	; (800079c <main+0x28c>)
 80006dc:	f000 fc62 	bl	8000fa4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, GPIO_PIN_SET);
 80006e0:	2201      	movs	r2, #1
 80006e2:	2104      	movs	r1, #4
 80006e4:	482d      	ldr	r0, [pc, #180]	; (800079c <main+0x28c>)
 80006e6:	f000 fc5d 	bl	8000fa4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, GPIO_PIN_RESET);
 80006ea:	2200      	movs	r2, #0
 80006ec:	2108      	movs	r1, #8
 80006ee:	482b      	ldr	r0, [pc, #172]	; (800079c <main+0x28c>)
 80006f0:	f000 fc58 	bl	8000fa4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, GPIO_PIN_RESET);
 80006f4:	2200      	movs	r2, #0
 80006f6:	2110      	movs	r1, #16
 80006f8:	4828      	ldr	r0, [pc, #160]	; (800079c <main+0x28c>)
 80006fa:	f000 fc53 	bl	8000fa4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, GPIO_PIN_SET);
 80006fe:	2201      	movs	r2, #1
 8000700:	2120      	movs	r1, #32
 8000702:	4826      	ldr	r0, [pc, #152]	; (800079c <main+0x28c>)
 8000704:	f000 fc4e 	bl	8000fa4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, GPIO_PIN_SET);
 8000708:	2201      	movs	r2, #1
 800070a:	2140      	movs	r1, #64	; 0x40
 800070c:	4823      	ldr	r0, [pc, #140]	; (800079c <main+0x28c>)
 800070e:	f000 fc49 	bl	8000fa4 <HAL_GPIO_WritePin>
		  if(count <= 0){
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	dc36      	bgt.n	8000786 <main+0x276>
			  next_state = YELLOW1_RED2;
 8000718:	2303      	movs	r3, #3
 800071a:	73bb      	strb	r3, [r7, #14]
			  count = 2;
 800071c:	2302      	movs	r3, #2
 800071e:	603b      	str	r3, [r7, #0]
			  l_count = 1;
 8000720:	2301      	movs	r3, #1
 8000722:	60bb      	str	r3, [r7, #8]
		  }
		  break;
 8000724:	e02f      	b.n	8000786 <main+0x276>
	  case YELLOW1_RED2:
		  HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, GPIO_PIN_SET);
 8000726:	2201      	movs	r2, #1
 8000728:	2102      	movs	r1, #2
 800072a:	481c      	ldr	r0, [pc, #112]	; (800079c <main+0x28c>)
 800072c:	f000 fc3a 	bl	8000fa4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, GPIO_PIN_RESET);
 8000730:	2200      	movs	r2, #0
 8000732:	2104      	movs	r1, #4
 8000734:	4819      	ldr	r0, [pc, #100]	; (800079c <main+0x28c>)
 8000736:	f000 fc35 	bl	8000fa4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, GPIO_PIN_SET);
 800073a:	2201      	movs	r2, #1
 800073c:	2108      	movs	r1, #8
 800073e:	4817      	ldr	r0, [pc, #92]	; (800079c <main+0x28c>)
 8000740:	f000 fc30 	bl	8000fa4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, GPIO_PIN_RESET);
 8000744:	2200      	movs	r2, #0
 8000746:	2110      	movs	r1, #16
 8000748:	4814      	ldr	r0, [pc, #80]	; (800079c <main+0x28c>)
 800074a:	f000 fc2b 	bl	8000fa4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, GPIO_PIN_SET);
 800074e:	2201      	movs	r2, #1
 8000750:	2120      	movs	r1, #32
 8000752:	4812      	ldr	r0, [pc, #72]	; (800079c <main+0x28c>)
 8000754:	f000 fc26 	bl	8000fa4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, GPIO_PIN_SET);
 8000758:	2201      	movs	r2, #1
 800075a:	2140      	movs	r1, #64	; 0x40
 800075c:	480f      	ldr	r0, [pc, #60]	; (800079c <main+0x28c>)
 800075e:	f000 fc21 	bl	8000fa4 <HAL_GPIO_WritePin>
		  if(count <= 0){
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	2b00      	cmp	r3, #0
 8000766:	dc10      	bgt.n	800078a <main+0x27a>
			  next_state = RED1_GREEN2;
 8000768:	2300      	movs	r3, #0
 800076a:	73bb      	strb	r3, [r7, #14]
			  count = 3;
 800076c:	2303      	movs	r3, #3
 800076e:	603b      	str	r3, [r7, #0]
			  l_count = 4;
 8000770:	2304      	movs	r3, #4
 8000772:	60bb      	str	r3, [r7, #8]
			  p_count = 2;
 8000774:	2302      	movs	r3, #2
 8000776:	607b      	str	r3, [r7, #4]
		  }
		  break;
 8000778:	e007      	b.n	800078a <main+0x27a>
	  default:
		  break;
 800077a:	bf00      	nop
 800077c:	e006      	b.n	800078c <main+0x27c>
		  break;
 800077e:	bf00      	nop
 8000780:	e004      	b.n	800078c <main+0x27c>
		  break;
 8000782:	bf00      	nop
 8000784:	e002      	b.n	800078c <main+0x27c>
		  break;
 8000786:	bf00      	nop
 8000788:	e000      	b.n	800078c <main+0x27c>
		  break;
 800078a:	bf00      	nop
	  }
	  curr_state = next_state;
 800078c:	7bbb      	ldrb	r3, [r7, #14]
 800078e:	73fb      	strb	r3, [r7, #15]
	 HAL_Delay(1000);
 8000790:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000794:	f000 f984 	bl	8000aa0 <HAL_Delay>
	   display7SEG(l_count, L0_GPIO_Port, L0_Pin,
 8000798:	e6eb      	b.n	8000572 <main+0x62>
 800079a:	bf00      	nop
 800079c:	40010800 	.word	0x40010800
 80007a0:	40010c00 	.word	0x40010c00

080007a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b090      	sub	sp, #64	; 0x40
 80007a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007aa:	f107 0318 	add.w	r3, r7, #24
 80007ae:	2228      	movs	r2, #40	; 0x28
 80007b0:	2100      	movs	r1, #0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f001 f80e 	bl	80017d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
 80007c4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007c6:	2302      	movs	r3, #2
 80007c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007ca:	2301      	movs	r3, #1
 80007cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007ce:	2310      	movs	r3, #16
 80007d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007d2:	2300      	movs	r3, #0
 80007d4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d6:	f107 0318 	add.w	r3, r7, #24
 80007da:	4618      	mov	r0, r3
 80007dc:	f000 fbfa 	bl	8000fd4 <HAL_RCC_OscConfig>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <SystemClock_Config+0x46>
  {
    Error_Handler();
 80007e6:	f000 f86d 	bl	80008c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ea:	230f      	movs	r3, #15
 80007ec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007ee:	2300      	movs	r3, #0
 80007f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f2:	2300      	movs	r3, #0
 80007f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007f6:	2300      	movs	r3, #0
 80007f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007fa:	2300      	movs	r3, #0
 80007fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007fe:	1d3b      	adds	r3, r7, #4
 8000800:	2100      	movs	r1, #0
 8000802:	4618      	mov	r0, r3
 8000804:	f000 fe66 	bl	80014d4 <HAL_RCC_ClockConfig>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800080e:	f000 f859 	bl	80008c4 <Error_Handler>
  }
}
 8000812:	bf00      	nop
 8000814:	3740      	adds	r7, #64	; 0x40
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
	...

0800081c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b086      	sub	sp, #24
 8000820:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000822:	f107 0308 	add.w	r3, r7, #8
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]
 800082c:	609a      	str	r2, [r3, #8]
 800082e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000830:	4b21      	ldr	r3, [pc, #132]	; (80008b8 <MX_GPIO_Init+0x9c>)
 8000832:	699b      	ldr	r3, [r3, #24]
 8000834:	4a20      	ldr	r2, [pc, #128]	; (80008b8 <MX_GPIO_Init+0x9c>)
 8000836:	f043 0304 	orr.w	r3, r3, #4
 800083a:	6193      	str	r3, [r2, #24]
 800083c:	4b1e      	ldr	r3, [pc, #120]	; (80008b8 <MX_GPIO_Init+0x9c>)
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	f003 0304 	and.w	r3, r3, #4
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000848:	4b1b      	ldr	r3, [pc, #108]	; (80008b8 <MX_GPIO_Init+0x9c>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	4a1a      	ldr	r2, [pc, #104]	; (80008b8 <MX_GPIO_Init+0x9c>)
 800084e:	f043 0308 	orr.w	r3, r3, #8
 8000852:	6193      	str	r3, [r2, #24]
 8000854:	4b18      	ldr	r3, [pc, #96]	; (80008b8 <MX_GPIO_Init+0x9c>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	f003 0308 	and.w	r3, r3, #8
 800085c:	603b      	str	r3, [r7, #0]
 800085e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED1_Pin|YELLOW1_Pin|GREEN1_Pin|RED2_Pin
 8000860:	2200      	movs	r2, #0
 8000862:	217e      	movs	r1, #126	; 0x7e
 8000864:	4815      	ldr	r0, [pc, #84]	; (80008bc <MX_GPIO_Init+0xa0>)
 8000866:	f000 fb9d 	bl	8000fa4 <HAL_GPIO_WritePin>
                          |YELLOW2_Pin|GREEN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, L0_Pin|L1_Pin|L2_Pin|P3_Pin
 800086a:	2200      	movs	r2, #0
 800086c:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8000870:	4813      	ldr	r0, [pc, #76]	; (80008c0 <MX_GPIO_Init+0xa4>)
 8000872:	f000 fb97 	bl	8000fa4 <HAL_GPIO_WritePin>
                          |L4_Pin|L5_Pin|L6_Pin|P0_Pin
                          |P1_Pin|P2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RED1_Pin YELLOW1_Pin GREEN1_Pin RED2_Pin
                           YELLOW2_Pin GREEN2_Pin */
  GPIO_InitStruct.Pin = RED1_Pin|YELLOW1_Pin|GREEN1_Pin|RED2_Pin
 8000876:	237e      	movs	r3, #126	; 0x7e
 8000878:	60bb      	str	r3, [r7, #8]
                          |YELLOW2_Pin|GREEN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087a:	2301      	movs	r3, #1
 800087c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000882:	2302      	movs	r3, #2
 8000884:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000886:	f107 0308 	add.w	r3, r7, #8
 800088a:	4619      	mov	r1, r3
 800088c:	480b      	ldr	r0, [pc, #44]	; (80008bc <MX_GPIO_Init+0xa0>)
 800088e:	f000 fa0f 	bl	8000cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : L0_Pin L1_Pin L2_Pin P3_Pin
                           P4_Pin P5_Pin P6_Pin L3_Pin
                           L4_Pin L5_Pin L6_Pin P0_Pin
                           P1_Pin P2_Pin */
  GPIO_InitStruct.Pin = L0_Pin|L1_Pin|L2_Pin|P3_Pin
 8000892:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8000896:	60bb      	str	r3, [r7, #8]
                          |P4_Pin|P5_Pin|P6_Pin|L3_Pin
                          |L4_Pin|L5_Pin|L6_Pin|P0_Pin
                          |P1_Pin|P2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000898:	2301      	movs	r3, #1
 800089a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a0:	2302      	movs	r3, #2
 80008a2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a4:	f107 0308 	add.w	r3, r7, #8
 80008a8:	4619      	mov	r1, r3
 80008aa:	4805      	ldr	r0, [pc, #20]	; (80008c0 <MX_GPIO_Init+0xa4>)
 80008ac:	f000 fa00 	bl	8000cb0 <HAL_GPIO_Init>

}
 80008b0:	bf00      	nop
 80008b2:	3718      	adds	r7, #24
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	40021000 	.word	0x40021000
 80008bc:	40010800 	.word	0x40010800
 80008c0:	40010c00 	.word	0x40010c00

080008c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c8:	b672      	cpsid	i
}
 80008ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008cc:	e7fe      	b.n	80008cc <Error_Handler+0x8>
	...

080008d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b085      	sub	sp, #20
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008d6:	4b15      	ldr	r3, [pc, #84]	; (800092c <HAL_MspInit+0x5c>)
 80008d8:	699b      	ldr	r3, [r3, #24]
 80008da:	4a14      	ldr	r2, [pc, #80]	; (800092c <HAL_MspInit+0x5c>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	6193      	str	r3, [r2, #24]
 80008e2:	4b12      	ldr	r3, [pc, #72]	; (800092c <HAL_MspInit+0x5c>)
 80008e4:	699b      	ldr	r3, [r3, #24]
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	60bb      	str	r3, [r7, #8]
 80008ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ee:	4b0f      	ldr	r3, [pc, #60]	; (800092c <HAL_MspInit+0x5c>)
 80008f0:	69db      	ldr	r3, [r3, #28]
 80008f2:	4a0e      	ldr	r2, [pc, #56]	; (800092c <HAL_MspInit+0x5c>)
 80008f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f8:	61d3      	str	r3, [r2, #28]
 80008fa:	4b0c      	ldr	r3, [pc, #48]	; (800092c <HAL_MspInit+0x5c>)
 80008fc:	69db      	ldr	r3, [r3, #28]
 80008fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000906:	4b0a      	ldr	r3, [pc, #40]	; (8000930 <HAL_MspInit+0x60>)
 8000908:	685b      	ldr	r3, [r3, #4]
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	4a04      	ldr	r2, [pc, #16]	; (8000930 <HAL_MspInit+0x60>)
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000922:	bf00      	nop
 8000924:	3714      	adds	r7, #20
 8000926:	46bd      	mov	sp, r7
 8000928:	bc80      	pop	{r7}
 800092a:	4770      	bx	lr
 800092c:	40021000 	.word	0x40021000
 8000930:	40010000 	.word	0x40010000

08000934 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000938:	e7fe      	b.n	8000938 <NMI_Handler+0x4>

0800093a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800093e:	e7fe      	b.n	800093e <HardFault_Handler+0x4>

08000940 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000944:	e7fe      	b.n	8000944 <MemManage_Handler+0x4>

08000946 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000946:	b480      	push	{r7}
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800094a:	e7fe      	b.n	800094a <BusFault_Handler+0x4>

0800094c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000950:	e7fe      	b.n	8000950 <UsageFault_Handler+0x4>

08000952 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	46bd      	mov	sp, r7
 800095a:	bc80      	pop	{r7}
 800095c:	4770      	bx	lr

0800095e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	46bd      	mov	sp, r7
 8000966:	bc80      	pop	{r7}
 8000968:	4770      	bx	lr

0800096a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	46bd      	mov	sp, r7
 8000972:	bc80      	pop	{r7}
 8000974:	4770      	bx	lr

08000976 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000976:	b580      	push	{r7, lr}
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800097a:	f000 f875 	bl	8000a68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}

08000982 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000986:	bf00      	nop
 8000988:	46bd      	mov	sp, r7
 800098a:	bc80      	pop	{r7}
 800098c:	4770      	bx	lr
	...

08000990 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000990:	f7ff fff7 	bl	8000982 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000994:	480b      	ldr	r0, [pc, #44]	; (80009c4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000996:	490c      	ldr	r1, [pc, #48]	; (80009c8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000998:	4a0c      	ldr	r2, [pc, #48]	; (80009cc <LoopFillZerobss+0x16>)
  movs r3, #0
 800099a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800099c:	e002      	b.n	80009a4 <LoopCopyDataInit>

0800099e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800099e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009a2:	3304      	adds	r3, #4

080009a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009a8:	d3f9      	bcc.n	800099e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009aa:	4a09      	ldr	r2, [pc, #36]	; (80009d0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80009ac:	4c09      	ldr	r4, [pc, #36]	; (80009d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009b0:	e001      	b.n	80009b6 <LoopFillZerobss>

080009b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009b4:	3204      	adds	r2, #4

080009b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009b8:	d3fb      	bcc.n	80009b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009ba:	f000 fee7 	bl	800178c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009be:	f7ff fda7 	bl	8000510 <main>
  bx lr
 80009c2:	4770      	bx	lr
  ldr r0, =_sdata
 80009c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009c8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009cc:	08001828 	.word	0x08001828
  ldr r2, =_sbss
 80009d0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009d4:	2000002c 	.word	0x2000002c

080009d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009d8:	e7fe      	b.n	80009d8 <ADC1_2_IRQHandler>
	...

080009dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009e0:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <HAL_Init+0x28>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a07      	ldr	r2, [pc, #28]	; (8000a04 <HAL_Init+0x28>)
 80009e6:	f043 0310 	orr.w	r3, r3, #16
 80009ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009ec:	2003      	movs	r0, #3
 80009ee:	f000 f92b 	bl	8000c48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009f2:	200f      	movs	r0, #15
 80009f4:	f000 f808 	bl	8000a08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009f8:	f7ff ff6a 	bl	80008d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009fc:	2300      	movs	r3, #0
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40022000 	.word	0x40022000

08000a08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a10:	4b12      	ldr	r3, [pc, #72]	; (8000a5c <HAL_InitTick+0x54>)
 8000a12:	681a      	ldr	r2, [r3, #0]
 8000a14:	4b12      	ldr	r3, [pc, #72]	; (8000a60 <HAL_InitTick+0x58>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	4619      	mov	r1, r3
 8000a1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a26:	4618      	mov	r0, r3
 8000a28:	f000 f935 	bl	8000c96 <HAL_SYSTICK_Config>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a32:	2301      	movs	r3, #1
 8000a34:	e00e      	b.n	8000a54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2b0f      	cmp	r3, #15
 8000a3a:	d80a      	bhi.n	8000a52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	6879      	ldr	r1, [r7, #4]
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	f000 f90b 	bl	8000c5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a48:	4a06      	ldr	r2, [pc, #24]	; (8000a64 <HAL_InitTick+0x5c>)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	e000      	b.n	8000a54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a52:	2301      	movs	r3, #1
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	20000000 	.word	0x20000000
 8000a60:	20000008 	.word	0x20000008
 8000a64:	20000004 	.word	0x20000004

08000a68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a6c:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <HAL_IncTick+0x1c>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	461a      	mov	r2, r3
 8000a72:	4b05      	ldr	r3, [pc, #20]	; (8000a88 <HAL_IncTick+0x20>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4413      	add	r3, r2
 8000a78:	4a03      	ldr	r2, [pc, #12]	; (8000a88 <HAL_IncTick+0x20>)
 8000a7a:	6013      	str	r3, [r2, #0]
}
 8000a7c:	bf00      	nop
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bc80      	pop	{r7}
 8000a82:	4770      	bx	lr
 8000a84:	20000008 	.word	0x20000008
 8000a88:	20000028 	.word	0x20000028

08000a8c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a90:	4b02      	ldr	r3, [pc, #8]	; (8000a9c <HAL_GetTick+0x10>)
 8000a92:	681b      	ldr	r3, [r3, #0]
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bc80      	pop	{r7}
 8000a9a:	4770      	bx	lr
 8000a9c:	20000028 	.word	0x20000028

08000aa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000aa8:	f7ff fff0 	bl	8000a8c <HAL_GetTick>
 8000aac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ab8:	d005      	beq.n	8000ac6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aba:	4b0a      	ldr	r3, [pc, #40]	; (8000ae4 <HAL_Delay+0x44>)
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	461a      	mov	r2, r3
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ac6:	bf00      	nop
 8000ac8:	f7ff ffe0 	bl	8000a8c <HAL_GetTick>
 8000acc:	4602      	mov	r2, r0
 8000ace:	68bb      	ldr	r3, [r7, #8]
 8000ad0:	1ad3      	subs	r3, r2, r3
 8000ad2:	68fa      	ldr	r2, [r7, #12]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d8f7      	bhi.n	8000ac8 <HAL_Delay+0x28>
  {
  }
}
 8000ad8:	bf00      	nop
 8000ada:	bf00      	nop
 8000adc:	3710      	adds	r7, #16
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000008 	.word	0x20000008

08000ae8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b085      	sub	sp, #20
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	f003 0307 	and.w	r3, r3, #7
 8000af6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000af8:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <__NVIC_SetPriorityGrouping+0x44>)
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000afe:	68ba      	ldr	r2, [r7, #8]
 8000b00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b04:	4013      	ands	r3, r2
 8000b06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b1a:	4a04      	ldr	r2, [pc, #16]	; (8000b2c <__NVIC_SetPriorityGrouping+0x44>)
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	60d3      	str	r3, [r2, #12]
}
 8000b20:	bf00      	nop
 8000b22:	3714      	adds	r7, #20
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bc80      	pop	{r7}
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	e000ed00 	.word	0xe000ed00

08000b30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b34:	4b04      	ldr	r3, [pc, #16]	; (8000b48 <__NVIC_GetPriorityGrouping+0x18>)
 8000b36:	68db      	ldr	r3, [r3, #12]
 8000b38:	0a1b      	lsrs	r3, r3, #8
 8000b3a:	f003 0307 	and.w	r3, r3, #7
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bc80      	pop	{r7}
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	6039      	str	r1, [r7, #0]
 8000b56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	db0a      	blt.n	8000b76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	b2da      	uxtb	r2, r3
 8000b64:	490c      	ldr	r1, [pc, #48]	; (8000b98 <__NVIC_SetPriority+0x4c>)
 8000b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6a:	0112      	lsls	r2, r2, #4
 8000b6c:	b2d2      	uxtb	r2, r2
 8000b6e:	440b      	add	r3, r1
 8000b70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b74:	e00a      	b.n	8000b8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	b2da      	uxtb	r2, r3
 8000b7a:	4908      	ldr	r1, [pc, #32]	; (8000b9c <__NVIC_SetPriority+0x50>)
 8000b7c:	79fb      	ldrb	r3, [r7, #7]
 8000b7e:	f003 030f 	and.w	r3, r3, #15
 8000b82:	3b04      	subs	r3, #4
 8000b84:	0112      	lsls	r2, r2, #4
 8000b86:	b2d2      	uxtb	r2, r2
 8000b88:	440b      	add	r3, r1
 8000b8a:	761a      	strb	r2, [r3, #24]
}
 8000b8c:	bf00      	nop
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bc80      	pop	{r7}
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	e000e100 	.word	0xe000e100
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b089      	sub	sp, #36	; 0x24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	60f8      	str	r0, [r7, #12]
 8000ba8:	60b9      	str	r1, [r7, #8]
 8000baa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	f003 0307 	and.w	r3, r3, #7
 8000bb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bb4:	69fb      	ldr	r3, [r7, #28]
 8000bb6:	f1c3 0307 	rsb	r3, r3, #7
 8000bba:	2b04      	cmp	r3, #4
 8000bbc:	bf28      	it	cs
 8000bbe:	2304      	movcs	r3, #4
 8000bc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	3304      	adds	r3, #4
 8000bc6:	2b06      	cmp	r3, #6
 8000bc8:	d902      	bls.n	8000bd0 <NVIC_EncodePriority+0x30>
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	3b03      	subs	r3, #3
 8000bce:	e000      	b.n	8000bd2 <NVIC_EncodePriority+0x32>
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000bd8:	69bb      	ldr	r3, [r7, #24]
 8000bda:	fa02 f303 	lsl.w	r3, r2, r3
 8000bde:	43da      	mvns	r2, r3
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	401a      	ands	r2, r3
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000be8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf2:	43d9      	mvns	r1, r3
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf8:	4313      	orrs	r3, r2
         );
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3724      	adds	r7, #36	; 0x24
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bc80      	pop	{r7}
 8000c02:	4770      	bx	lr

08000c04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	3b01      	subs	r3, #1
 8000c10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c14:	d301      	bcc.n	8000c1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c16:	2301      	movs	r3, #1
 8000c18:	e00f      	b.n	8000c3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c1a:	4a0a      	ldr	r2, [pc, #40]	; (8000c44 <SysTick_Config+0x40>)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	3b01      	subs	r3, #1
 8000c20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c22:	210f      	movs	r1, #15
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295
 8000c28:	f7ff ff90 	bl	8000b4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c2c:	4b05      	ldr	r3, [pc, #20]	; (8000c44 <SysTick_Config+0x40>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c32:	4b04      	ldr	r3, [pc, #16]	; (8000c44 <SysTick_Config+0x40>)
 8000c34:	2207      	movs	r2, #7
 8000c36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c38:	2300      	movs	r3, #0
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	e000e010 	.word	0xe000e010

08000c48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	f7ff ff49 	bl	8000ae8 <__NVIC_SetPriorityGrouping>
}
 8000c56:	bf00      	nop
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b086      	sub	sp, #24
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	4603      	mov	r3, r0
 8000c66:	60b9      	str	r1, [r7, #8]
 8000c68:	607a      	str	r2, [r7, #4]
 8000c6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c70:	f7ff ff5e 	bl	8000b30 <__NVIC_GetPriorityGrouping>
 8000c74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	68b9      	ldr	r1, [r7, #8]
 8000c7a:	6978      	ldr	r0, [r7, #20]
 8000c7c:	f7ff ff90 	bl	8000ba0 <NVIC_EncodePriority>
 8000c80:	4602      	mov	r2, r0
 8000c82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c86:	4611      	mov	r1, r2
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff ff5f 	bl	8000b4c <__NVIC_SetPriority>
}
 8000c8e:	bf00      	nop
 8000c90:	3718      	adds	r7, #24
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b082      	sub	sp, #8
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c9e:	6878      	ldr	r0, [r7, #4]
 8000ca0:	f7ff ffb0 	bl	8000c04 <SysTick_Config>
 8000ca4:	4603      	mov	r3, r0
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
	...

08000cb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b08b      	sub	sp, #44	; 0x2c
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cc2:	e148      	b.n	8000f56 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	69fa      	ldr	r2, [r7, #28]
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000cd8:	69ba      	ldr	r2, [r7, #24]
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	f040 8137 	bne.w	8000f50 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	4aa3      	ldr	r2, [pc, #652]	; (8000f74 <HAL_GPIO_Init+0x2c4>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d05e      	beq.n	8000daa <HAL_GPIO_Init+0xfa>
 8000cec:	4aa1      	ldr	r2, [pc, #644]	; (8000f74 <HAL_GPIO_Init+0x2c4>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d875      	bhi.n	8000dde <HAL_GPIO_Init+0x12e>
 8000cf2:	4aa1      	ldr	r2, [pc, #644]	; (8000f78 <HAL_GPIO_Init+0x2c8>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d058      	beq.n	8000daa <HAL_GPIO_Init+0xfa>
 8000cf8:	4a9f      	ldr	r2, [pc, #636]	; (8000f78 <HAL_GPIO_Init+0x2c8>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d86f      	bhi.n	8000dde <HAL_GPIO_Init+0x12e>
 8000cfe:	4a9f      	ldr	r2, [pc, #636]	; (8000f7c <HAL_GPIO_Init+0x2cc>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d052      	beq.n	8000daa <HAL_GPIO_Init+0xfa>
 8000d04:	4a9d      	ldr	r2, [pc, #628]	; (8000f7c <HAL_GPIO_Init+0x2cc>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d869      	bhi.n	8000dde <HAL_GPIO_Init+0x12e>
 8000d0a:	4a9d      	ldr	r2, [pc, #628]	; (8000f80 <HAL_GPIO_Init+0x2d0>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d04c      	beq.n	8000daa <HAL_GPIO_Init+0xfa>
 8000d10:	4a9b      	ldr	r2, [pc, #620]	; (8000f80 <HAL_GPIO_Init+0x2d0>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d863      	bhi.n	8000dde <HAL_GPIO_Init+0x12e>
 8000d16:	4a9b      	ldr	r2, [pc, #620]	; (8000f84 <HAL_GPIO_Init+0x2d4>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d046      	beq.n	8000daa <HAL_GPIO_Init+0xfa>
 8000d1c:	4a99      	ldr	r2, [pc, #612]	; (8000f84 <HAL_GPIO_Init+0x2d4>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d85d      	bhi.n	8000dde <HAL_GPIO_Init+0x12e>
 8000d22:	2b12      	cmp	r3, #18
 8000d24:	d82a      	bhi.n	8000d7c <HAL_GPIO_Init+0xcc>
 8000d26:	2b12      	cmp	r3, #18
 8000d28:	d859      	bhi.n	8000dde <HAL_GPIO_Init+0x12e>
 8000d2a:	a201      	add	r2, pc, #4	; (adr r2, 8000d30 <HAL_GPIO_Init+0x80>)
 8000d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d30:	08000dab 	.word	0x08000dab
 8000d34:	08000d85 	.word	0x08000d85
 8000d38:	08000d97 	.word	0x08000d97
 8000d3c:	08000dd9 	.word	0x08000dd9
 8000d40:	08000ddf 	.word	0x08000ddf
 8000d44:	08000ddf 	.word	0x08000ddf
 8000d48:	08000ddf 	.word	0x08000ddf
 8000d4c:	08000ddf 	.word	0x08000ddf
 8000d50:	08000ddf 	.word	0x08000ddf
 8000d54:	08000ddf 	.word	0x08000ddf
 8000d58:	08000ddf 	.word	0x08000ddf
 8000d5c:	08000ddf 	.word	0x08000ddf
 8000d60:	08000ddf 	.word	0x08000ddf
 8000d64:	08000ddf 	.word	0x08000ddf
 8000d68:	08000ddf 	.word	0x08000ddf
 8000d6c:	08000ddf 	.word	0x08000ddf
 8000d70:	08000ddf 	.word	0x08000ddf
 8000d74:	08000d8d 	.word	0x08000d8d
 8000d78:	08000da1 	.word	0x08000da1
 8000d7c:	4a82      	ldr	r2, [pc, #520]	; (8000f88 <HAL_GPIO_Init+0x2d8>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d013      	beq.n	8000daa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d82:	e02c      	b.n	8000dde <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	623b      	str	r3, [r7, #32]
          break;
 8000d8a:	e029      	b.n	8000de0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	3304      	adds	r3, #4
 8000d92:	623b      	str	r3, [r7, #32]
          break;
 8000d94:	e024      	b.n	8000de0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	68db      	ldr	r3, [r3, #12]
 8000d9a:	3308      	adds	r3, #8
 8000d9c:	623b      	str	r3, [r7, #32]
          break;
 8000d9e:	e01f      	b.n	8000de0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	330c      	adds	r3, #12
 8000da6:	623b      	str	r3, [r7, #32]
          break;
 8000da8:	e01a      	b.n	8000de0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	689b      	ldr	r3, [r3, #8]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d102      	bne.n	8000db8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000db2:	2304      	movs	r3, #4
 8000db4:	623b      	str	r3, [r7, #32]
          break;
 8000db6:	e013      	b.n	8000de0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	689b      	ldr	r3, [r3, #8]
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d105      	bne.n	8000dcc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000dc0:	2308      	movs	r3, #8
 8000dc2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	69fa      	ldr	r2, [r7, #28]
 8000dc8:	611a      	str	r2, [r3, #16]
          break;
 8000dca:	e009      	b.n	8000de0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000dcc:	2308      	movs	r3, #8
 8000dce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	69fa      	ldr	r2, [r7, #28]
 8000dd4:	615a      	str	r2, [r3, #20]
          break;
 8000dd6:	e003      	b.n	8000de0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	623b      	str	r3, [r7, #32]
          break;
 8000ddc:	e000      	b.n	8000de0 <HAL_GPIO_Init+0x130>
          break;
 8000dde:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000de0:	69bb      	ldr	r3, [r7, #24]
 8000de2:	2bff      	cmp	r3, #255	; 0xff
 8000de4:	d801      	bhi.n	8000dea <HAL_GPIO_Init+0x13a>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	e001      	b.n	8000dee <HAL_GPIO_Init+0x13e>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	3304      	adds	r3, #4
 8000dee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000df0:	69bb      	ldr	r3, [r7, #24]
 8000df2:	2bff      	cmp	r3, #255	; 0xff
 8000df4:	d802      	bhi.n	8000dfc <HAL_GPIO_Init+0x14c>
 8000df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	e002      	b.n	8000e02 <HAL_GPIO_Init+0x152>
 8000dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dfe:	3b08      	subs	r3, #8
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	210f      	movs	r1, #15
 8000e0a:	693b      	ldr	r3, [r7, #16]
 8000e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e10:	43db      	mvns	r3, r3
 8000e12:	401a      	ands	r2, r3
 8000e14:	6a39      	ldr	r1, [r7, #32]
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1c:	431a      	orrs	r2, r3
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	f000 8090 	beq.w	8000f50 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e30:	4b56      	ldr	r3, [pc, #344]	; (8000f8c <HAL_GPIO_Init+0x2dc>)
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	4a55      	ldr	r2, [pc, #340]	; (8000f8c <HAL_GPIO_Init+0x2dc>)
 8000e36:	f043 0301 	orr.w	r3, r3, #1
 8000e3a:	6193      	str	r3, [r2, #24]
 8000e3c:	4b53      	ldr	r3, [pc, #332]	; (8000f8c <HAL_GPIO_Init+0x2dc>)
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	f003 0301 	and.w	r3, r3, #1
 8000e44:	60bb      	str	r3, [r7, #8]
 8000e46:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e48:	4a51      	ldr	r2, [pc, #324]	; (8000f90 <HAL_GPIO_Init+0x2e0>)
 8000e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e4c:	089b      	lsrs	r3, r3, #2
 8000e4e:	3302      	adds	r3, #2
 8000e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e54:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e58:	f003 0303 	and.w	r3, r3, #3
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	220f      	movs	r2, #15
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	43db      	mvns	r3, r3
 8000e66:	68fa      	ldr	r2, [r7, #12]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	4a49      	ldr	r2, [pc, #292]	; (8000f94 <HAL_GPIO_Init+0x2e4>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d00d      	beq.n	8000e90 <HAL_GPIO_Init+0x1e0>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	4a48      	ldr	r2, [pc, #288]	; (8000f98 <HAL_GPIO_Init+0x2e8>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d007      	beq.n	8000e8c <HAL_GPIO_Init+0x1dc>
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4a47      	ldr	r2, [pc, #284]	; (8000f9c <HAL_GPIO_Init+0x2ec>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d101      	bne.n	8000e88 <HAL_GPIO_Init+0x1d8>
 8000e84:	2302      	movs	r3, #2
 8000e86:	e004      	b.n	8000e92 <HAL_GPIO_Init+0x1e2>
 8000e88:	2303      	movs	r3, #3
 8000e8a:	e002      	b.n	8000e92 <HAL_GPIO_Init+0x1e2>
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	e000      	b.n	8000e92 <HAL_GPIO_Init+0x1e2>
 8000e90:	2300      	movs	r3, #0
 8000e92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e94:	f002 0203 	and.w	r2, r2, #3
 8000e98:	0092      	lsls	r2, r2, #2
 8000e9a:	4093      	lsls	r3, r2
 8000e9c:	68fa      	ldr	r2, [r7, #12]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ea2:	493b      	ldr	r1, [pc, #236]	; (8000f90 <HAL_GPIO_Init+0x2e0>)
 8000ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea6:	089b      	lsrs	r3, r3, #2
 8000ea8:	3302      	adds	r3, #2
 8000eaa:	68fa      	ldr	r2, [r7, #12]
 8000eac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d006      	beq.n	8000eca <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ebc:	4b38      	ldr	r3, [pc, #224]	; (8000fa0 <HAL_GPIO_Init+0x2f0>)
 8000ebe:	689a      	ldr	r2, [r3, #8]
 8000ec0:	4937      	ldr	r1, [pc, #220]	; (8000fa0 <HAL_GPIO_Init+0x2f0>)
 8000ec2:	69bb      	ldr	r3, [r7, #24]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	608b      	str	r3, [r1, #8]
 8000ec8:	e006      	b.n	8000ed8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000eca:	4b35      	ldr	r3, [pc, #212]	; (8000fa0 <HAL_GPIO_Init+0x2f0>)
 8000ecc:	689a      	ldr	r2, [r3, #8]
 8000ece:	69bb      	ldr	r3, [r7, #24]
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	4933      	ldr	r1, [pc, #204]	; (8000fa0 <HAL_GPIO_Init+0x2f0>)
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d006      	beq.n	8000ef2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ee4:	4b2e      	ldr	r3, [pc, #184]	; (8000fa0 <HAL_GPIO_Init+0x2f0>)
 8000ee6:	68da      	ldr	r2, [r3, #12]
 8000ee8:	492d      	ldr	r1, [pc, #180]	; (8000fa0 <HAL_GPIO_Init+0x2f0>)
 8000eea:	69bb      	ldr	r3, [r7, #24]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	60cb      	str	r3, [r1, #12]
 8000ef0:	e006      	b.n	8000f00 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ef2:	4b2b      	ldr	r3, [pc, #172]	; (8000fa0 <HAL_GPIO_Init+0x2f0>)
 8000ef4:	68da      	ldr	r2, [r3, #12]
 8000ef6:	69bb      	ldr	r3, [r7, #24]
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	4929      	ldr	r1, [pc, #164]	; (8000fa0 <HAL_GPIO_Init+0x2f0>)
 8000efc:	4013      	ands	r3, r2
 8000efe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d006      	beq.n	8000f1a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f0c:	4b24      	ldr	r3, [pc, #144]	; (8000fa0 <HAL_GPIO_Init+0x2f0>)
 8000f0e:	685a      	ldr	r2, [r3, #4]
 8000f10:	4923      	ldr	r1, [pc, #140]	; (8000fa0 <HAL_GPIO_Init+0x2f0>)
 8000f12:	69bb      	ldr	r3, [r7, #24]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	604b      	str	r3, [r1, #4]
 8000f18:	e006      	b.n	8000f28 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f1a:	4b21      	ldr	r3, [pc, #132]	; (8000fa0 <HAL_GPIO_Init+0x2f0>)
 8000f1c:	685a      	ldr	r2, [r3, #4]
 8000f1e:	69bb      	ldr	r3, [r7, #24]
 8000f20:	43db      	mvns	r3, r3
 8000f22:	491f      	ldr	r1, [pc, #124]	; (8000fa0 <HAL_GPIO_Init+0x2f0>)
 8000f24:	4013      	ands	r3, r2
 8000f26:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d006      	beq.n	8000f42 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f34:	4b1a      	ldr	r3, [pc, #104]	; (8000fa0 <HAL_GPIO_Init+0x2f0>)
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	4919      	ldr	r1, [pc, #100]	; (8000fa0 <HAL_GPIO_Init+0x2f0>)
 8000f3a:	69bb      	ldr	r3, [r7, #24]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	600b      	str	r3, [r1, #0]
 8000f40:	e006      	b.n	8000f50 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f42:	4b17      	ldr	r3, [pc, #92]	; (8000fa0 <HAL_GPIO_Init+0x2f0>)
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	69bb      	ldr	r3, [r7, #24]
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	4915      	ldr	r1, [pc, #84]	; (8000fa0 <HAL_GPIO_Init+0x2f0>)
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f52:	3301      	adds	r3, #1
 8000f54:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	f47f aeaf 	bne.w	8000cc4 <HAL_GPIO_Init+0x14>
  }
}
 8000f66:	bf00      	nop
 8000f68:	bf00      	nop
 8000f6a:	372c      	adds	r7, #44	; 0x2c
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bc80      	pop	{r7}
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	10320000 	.word	0x10320000
 8000f78:	10310000 	.word	0x10310000
 8000f7c:	10220000 	.word	0x10220000
 8000f80:	10210000 	.word	0x10210000
 8000f84:	10120000 	.word	0x10120000
 8000f88:	10110000 	.word	0x10110000
 8000f8c:	40021000 	.word	0x40021000
 8000f90:	40010000 	.word	0x40010000
 8000f94:	40010800 	.word	0x40010800
 8000f98:	40010c00 	.word	0x40010c00
 8000f9c:	40011000 	.word	0x40011000
 8000fa0:	40010400 	.word	0x40010400

08000fa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	460b      	mov	r3, r1
 8000fae:	807b      	strh	r3, [r7, #2]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fb4:	787b      	ldrb	r3, [r7, #1]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d003      	beq.n	8000fc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fba:	887a      	ldrh	r2, [r7, #2]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000fc0:	e003      	b.n	8000fca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000fc2:	887b      	ldrh	r3, [r7, #2]
 8000fc4:	041a      	lsls	r2, r3, #16
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	611a      	str	r2, [r3, #16]
}
 8000fca:	bf00      	nop
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bc80      	pop	{r7}
 8000fd2:	4770      	bx	lr

08000fd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d101      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e26c      	b.n	80014c0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	f000 8087 	beq.w	8001102 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ff4:	4b92      	ldr	r3, [pc, #584]	; (8001240 <HAL_RCC_OscConfig+0x26c>)
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f003 030c 	and.w	r3, r3, #12
 8000ffc:	2b04      	cmp	r3, #4
 8000ffe:	d00c      	beq.n	800101a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001000:	4b8f      	ldr	r3, [pc, #572]	; (8001240 <HAL_RCC_OscConfig+0x26c>)
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f003 030c 	and.w	r3, r3, #12
 8001008:	2b08      	cmp	r3, #8
 800100a:	d112      	bne.n	8001032 <HAL_RCC_OscConfig+0x5e>
 800100c:	4b8c      	ldr	r3, [pc, #560]	; (8001240 <HAL_RCC_OscConfig+0x26c>)
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001014:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001018:	d10b      	bne.n	8001032 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800101a:	4b89      	ldr	r3, [pc, #548]	; (8001240 <HAL_RCC_OscConfig+0x26c>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001022:	2b00      	cmp	r3, #0
 8001024:	d06c      	beq.n	8001100 <HAL_RCC_OscConfig+0x12c>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d168      	bne.n	8001100 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	e246      	b.n	80014c0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800103a:	d106      	bne.n	800104a <HAL_RCC_OscConfig+0x76>
 800103c:	4b80      	ldr	r3, [pc, #512]	; (8001240 <HAL_RCC_OscConfig+0x26c>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a7f      	ldr	r2, [pc, #508]	; (8001240 <HAL_RCC_OscConfig+0x26c>)
 8001042:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001046:	6013      	str	r3, [r2, #0]
 8001048:	e02e      	b.n	80010a8 <HAL_RCC_OscConfig+0xd4>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d10c      	bne.n	800106c <HAL_RCC_OscConfig+0x98>
 8001052:	4b7b      	ldr	r3, [pc, #492]	; (8001240 <HAL_RCC_OscConfig+0x26c>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a7a      	ldr	r2, [pc, #488]	; (8001240 <HAL_RCC_OscConfig+0x26c>)
 8001058:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800105c:	6013      	str	r3, [r2, #0]
 800105e:	4b78      	ldr	r3, [pc, #480]	; (8001240 <HAL_RCC_OscConfig+0x26c>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a77      	ldr	r2, [pc, #476]	; (8001240 <HAL_RCC_OscConfig+0x26c>)
 8001064:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001068:	6013      	str	r3, [r2, #0]
 800106a:	e01d      	b.n	80010a8 <HAL_RCC_OscConfig+0xd4>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001074:	d10c      	bne.n	8001090 <HAL_RCC_OscConfig+0xbc>
 8001076:	4b72      	ldr	r3, [pc, #456]	; (8001240 <HAL_RCC_OscConfig+0x26c>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a71      	ldr	r2, [pc, #452]	; (8001240 <HAL_RCC_OscConfig+0x26c>)
 800107c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001080:	6013      	str	r3, [r2, #0]
 8001082:	4b6f      	ldr	r3, [pc, #444]	; (8001240 <HAL_RCC_OscConfig+0x26c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a6e      	ldr	r2, [pc, #440]	; (8001240 <HAL_RCC_OscConfig+0x26c>)
 8001088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800108c:	6013      	str	r3, [r2, #0]
 800108e:	e00b      	b.n	80010a8 <HAL_RCC_OscConfig+0xd4>
 8001090:	4b6b      	ldr	r3, [pc, #428]	; (8001240 <HAL_RCC_OscConfig+0x26c>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a6a      	ldr	r2, [pc, #424]	; (8001240 <HAL_RCC_OscConfig+0x26c>)
 8001096:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800109a:	6013      	str	r3, [r2, #0]
 800109c:	4b68      	ldr	r3, [pc, #416]	; (8001240 <HAL_RCC_OscConfig+0x26c>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a67      	ldr	r2, [pc, #412]	; (8001240 <HAL_RCC_OscConfig+0x26c>)
 80010a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d013      	beq.n	80010d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010b0:	f7ff fcec 	bl	8000a8c <HAL_GetTick>
 80010b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010b6:	e008      	b.n	80010ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010b8:	f7ff fce8 	bl	8000a8c <HAL_GetTick>
 80010bc:	4602      	mov	r2, r0
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	2b64      	cmp	r3, #100	; 0x64
 80010c4:	d901      	bls.n	80010ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80010c6:	2303      	movs	r3, #3
 80010c8:	e1fa      	b.n	80014c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ca:	4b5d      	ldr	r3, [pc, #372]	; (8001240 <HAL_RCC_OscConfig+0x26c>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d0f0      	beq.n	80010b8 <HAL_RCC_OscConfig+0xe4>
 80010d6:	e014      	b.n	8001102 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d8:	f7ff fcd8 	bl	8000a8c <HAL_GetTick>
 80010dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010de:	e008      	b.n	80010f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010e0:	f7ff fcd4 	bl	8000a8c <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	2b64      	cmp	r3, #100	; 0x64
 80010ec:	d901      	bls.n	80010f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80010ee:	2303      	movs	r3, #3
 80010f0:	e1e6      	b.n	80014c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010f2:	4b53      	ldr	r3, [pc, #332]	; (8001240 <HAL_RCC_OscConfig+0x26c>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d1f0      	bne.n	80010e0 <HAL_RCC_OscConfig+0x10c>
 80010fe:	e000      	b.n	8001102 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001100:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 0302 	and.w	r3, r3, #2
 800110a:	2b00      	cmp	r3, #0
 800110c:	d063      	beq.n	80011d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800110e:	4b4c      	ldr	r3, [pc, #304]	; (8001240 <HAL_RCC_OscConfig+0x26c>)
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f003 030c 	and.w	r3, r3, #12
 8001116:	2b00      	cmp	r3, #0
 8001118:	d00b      	beq.n	8001132 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800111a:	4b49      	ldr	r3, [pc, #292]	; (8001240 <HAL_RCC_OscConfig+0x26c>)
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f003 030c 	and.w	r3, r3, #12
 8001122:	2b08      	cmp	r3, #8
 8001124:	d11c      	bne.n	8001160 <HAL_RCC_OscConfig+0x18c>
 8001126:	4b46      	ldr	r3, [pc, #280]	; (8001240 <HAL_RCC_OscConfig+0x26c>)
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d116      	bne.n	8001160 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001132:	4b43      	ldr	r3, [pc, #268]	; (8001240 <HAL_RCC_OscConfig+0x26c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 0302 	and.w	r3, r3, #2
 800113a:	2b00      	cmp	r3, #0
 800113c:	d005      	beq.n	800114a <HAL_RCC_OscConfig+0x176>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	691b      	ldr	r3, [r3, #16]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d001      	beq.n	800114a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e1ba      	b.n	80014c0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800114a:	4b3d      	ldr	r3, [pc, #244]	; (8001240 <HAL_RCC_OscConfig+0x26c>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	695b      	ldr	r3, [r3, #20]
 8001156:	00db      	lsls	r3, r3, #3
 8001158:	4939      	ldr	r1, [pc, #228]	; (8001240 <HAL_RCC_OscConfig+0x26c>)
 800115a:	4313      	orrs	r3, r2
 800115c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800115e:	e03a      	b.n	80011d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	691b      	ldr	r3, [r3, #16]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d020      	beq.n	80011aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001168:	4b36      	ldr	r3, [pc, #216]	; (8001244 <HAL_RCC_OscConfig+0x270>)
 800116a:	2201      	movs	r2, #1
 800116c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800116e:	f7ff fc8d 	bl	8000a8c <HAL_GetTick>
 8001172:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001174:	e008      	b.n	8001188 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001176:	f7ff fc89 	bl	8000a8c <HAL_GetTick>
 800117a:	4602      	mov	r2, r0
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	2b02      	cmp	r3, #2
 8001182:	d901      	bls.n	8001188 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001184:	2303      	movs	r3, #3
 8001186:	e19b      	b.n	80014c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001188:	4b2d      	ldr	r3, [pc, #180]	; (8001240 <HAL_RCC_OscConfig+0x26c>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f003 0302 	and.w	r3, r3, #2
 8001190:	2b00      	cmp	r3, #0
 8001192:	d0f0      	beq.n	8001176 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001194:	4b2a      	ldr	r3, [pc, #168]	; (8001240 <HAL_RCC_OscConfig+0x26c>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	695b      	ldr	r3, [r3, #20]
 80011a0:	00db      	lsls	r3, r3, #3
 80011a2:	4927      	ldr	r1, [pc, #156]	; (8001240 <HAL_RCC_OscConfig+0x26c>)
 80011a4:	4313      	orrs	r3, r2
 80011a6:	600b      	str	r3, [r1, #0]
 80011a8:	e015      	b.n	80011d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011aa:	4b26      	ldr	r3, [pc, #152]	; (8001244 <HAL_RCC_OscConfig+0x270>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b0:	f7ff fc6c 	bl	8000a8c <HAL_GetTick>
 80011b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011b6:	e008      	b.n	80011ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011b8:	f7ff fc68 	bl	8000a8c <HAL_GetTick>
 80011bc:	4602      	mov	r2, r0
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d901      	bls.n	80011ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80011c6:	2303      	movs	r3, #3
 80011c8:	e17a      	b.n	80014c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ca:	4b1d      	ldr	r3, [pc, #116]	; (8001240 <HAL_RCC_OscConfig+0x26c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0302 	and.w	r3, r3, #2
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d1f0      	bne.n	80011b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 0308 	and.w	r3, r3, #8
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d03a      	beq.n	8001258 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	699b      	ldr	r3, [r3, #24]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d019      	beq.n	800121e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011ea:	4b17      	ldr	r3, [pc, #92]	; (8001248 <HAL_RCC_OscConfig+0x274>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011f0:	f7ff fc4c 	bl	8000a8c <HAL_GetTick>
 80011f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011f6:	e008      	b.n	800120a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011f8:	f7ff fc48 	bl	8000a8c <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	2b02      	cmp	r3, #2
 8001204:	d901      	bls.n	800120a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001206:	2303      	movs	r3, #3
 8001208:	e15a      	b.n	80014c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800120a:	4b0d      	ldr	r3, [pc, #52]	; (8001240 <HAL_RCC_OscConfig+0x26c>)
 800120c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	2b00      	cmp	r3, #0
 8001214:	d0f0      	beq.n	80011f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001216:	2001      	movs	r0, #1
 8001218:	f000 fa9a 	bl	8001750 <RCC_Delay>
 800121c:	e01c      	b.n	8001258 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800121e:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <HAL_RCC_OscConfig+0x274>)
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001224:	f7ff fc32 	bl	8000a8c <HAL_GetTick>
 8001228:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800122a:	e00f      	b.n	800124c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800122c:	f7ff fc2e 	bl	8000a8c <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	2b02      	cmp	r3, #2
 8001238:	d908      	bls.n	800124c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e140      	b.n	80014c0 <HAL_RCC_OscConfig+0x4ec>
 800123e:	bf00      	nop
 8001240:	40021000 	.word	0x40021000
 8001244:	42420000 	.word	0x42420000
 8001248:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800124c:	4b9e      	ldr	r3, [pc, #632]	; (80014c8 <HAL_RCC_OscConfig+0x4f4>)
 800124e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001250:	f003 0302 	and.w	r3, r3, #2
 8001254:	2b00      	cmp	r3, #0
 8001256:	d1e9      	bne.n	800122c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f003 0304 	and.w	r3, r3, #4
 8001260:	2b00      	cmp	r3, #0
 8001262:	f000 80a6 	beq.w	80013b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001266:	2300      	movs	r3, #0
 8001268:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800126a:	4b97      	ldr	r3, [pc, #604]	; (80014c8 <HAL_RCC_OscConfig+0x4f4>)
 800126c:	69db      	ldr	r3, [r3, #28]
 800126e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d10d      	bne.n	8001292 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001276:	4b94      	ldr	r3, [pc, #592]	; (80014c8 <HAL_RCC_OscConfig+0x4f4>)
 8001278:	69db      	ldr	r3, [r3, #28]
 800127a:	4a93      	ldr	r2, [pc, #588]	; (80014c8 <HAL_RCC_OscConfig+0x4f4>)
 800127c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001280:	61d3      	str	r3, [r2, #28]
 8001282:	4b91      	ldr	r3, [pc, #580]	; (80014c8 <HAL_RCC_OscConfig+0x4f4>)
 8001284:	69db      	ldr	r3, [r3, #28]
 8001286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800128a:	60bb      	str	r3, [r7, #8]
 800128c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800128e:	2301      	movs	r3, #1
 8001290:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001292:	4b8e      	ldr	r3, [pc, #568]	; (80014cc <HAL_RCC_OscConfig+0x4f8>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800129a:	2b00      	cmp	r3, #0
 800129c:	d118      	bne.n	80012d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800129e:	4b8b      	ldr	r3, [pc, #556]	; (80014cc <HAL_RCC_OscConfig+0x4f8>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a8a      	ldr	r2, [pc, #552]	; (80014cc <HAL_RCC_OscConfig+0x4f8>)
 80012a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012aa:	f7ff fbef 	bl	8000a8c <HAL_GetTick>
 80012ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012b0:	e008      	b.n	80012c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012b2:	f7ff fbeb 	bl	8000a8c <HAL_GetTick>
 80012b6:	4602      	mov	r2, r0
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	2b64      	cmp	r3, #100	; 0x64
 80012be:	d901      	bls.n	80012c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80012c0:	2303      	movs	r3, #3
 80012c2:	e0fd      	b.n	80014c0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012c4:	4b81      	ldr	r3, [pc, #516]	; (80014cc <HAL_RCC_OscConfig+0x4f8>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d0f0      	beq.n	80012b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d106      	bne.n	80012e6 <HAL_RCC_OscConfig+0x312>
 80012d8:	4b7b      	ldr	r3, [pc, #492]	; (80014c8 <HAL_RCC_OscConfig+0x4f4>)
 80012da:	6a1b      	ldr	r3, [r3, #32]
 80012dc:	4a7a      	ldr	r2, [pc, #488]	; (80014c8 <HAL_RCC_OscConfig+0x4f4>)
 80012de:	f043 0301 	orr.w	r3, r3, #1
 80012e2:	6213      	str	r3, [r2, #32]
 80012e4:	e02d      	b.n	8001342 <HAL_RCC_OscConfig+0x36e>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d10c      	bne.n	8001308 <HAL_RCC_OscConfig+0x334>
 80012ee:	4b76      	ldr	r3, [pc, #472]	; (80014c8 <HAL_RCC_OscConfig+0x4f4>)
 80012f0:	6a1b      	ldr	r3, [r3, #32]
 80012f2:	4a75      	ldr	r2, [pc, #468]	; (80014c8 <HAL_RCC_OscConfig+0x4f4>)
 80012f4:	f023 0301 	bic.w	r3, r3, #1
 80012f8:	6213      	str	r3, [r2, #32]
 80012fa:	4b73      	ldr	r3, [pc, #460]	; (80014c8 <HAL_RCC_OscConfig+0x4f4>)
 80012fc:	6a1b      	ldr	r3, [r3, #32]
 80012fe:	4a72      	ldr	r2, [pc, #456]	; (80014c8 <HAL_RCC_OscConfig+0x4f4>)
 8001300:	f023 0304 	bic.w	r3, r3, #4
 8001304:	6213      	str	r3, [r2, #32]
 8001306:	e01c      	b.n	8001342 <HAL_RCC_OscConfig+0x36e>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	2b05      	cmp	r3, #5
 800130e:	d10c      	bne.n	800132a <HAL_RCC_OscConfig+0x356>
 8001310:	4b6d      	ldr	r3, [pc, #436]	; (80014c8 <HAL_RCC_OscConfig+0x4f4>)
 8001312:	6a1b      	ldr	r3, [r3, #32]
 8001314:	4a6c      	ldr	r2, [pc, #432]	; (80014c8 <HAL_RCC_OscConfig+0x4f4>)
 8001316:	f043 0304 	orr.w	r3, r3, #4
 800131a:	6213      	str	r3, [r2, #32]
 800131c:	4b6a      	ldr	r3, [pc, #424]	; (80014c8 <HAL_RCC_OscConfig+0x4f4>)
 800131e:	6a1b      	ldr	r3, [r3, #32]
 8001320:	4a69      	ldr	r2, [pc, #420]	; (80014c8 <HAL_RCC_OscConfig+0x4f4>)
 8001322:	f043 0301 	orr.w	r3, r3, #1
 8001326:	6213      	str	r3, [r2, #32]
 8001328:	e00b      	b.n	8001342 <HAL_RCC_OscConfig+0x36e>
 800132a:	4b67      	ldr	r3, [pc, #412]	; (80014c8 <HAL_RCC_OscConfig+0x4f4>)
 800132c:	6a1b      	ldr	r3, [r3, #32]
 800132e:	4a66      	ldr	r2, [pc, #408]	; (80014c8 <HAL_RCC_OscConfig+0x4f4>)
 8001330:	f023 0301 	bic.w	r3, r3, #1
 8001334:	6213      	str	r3, [r2, #32]
 8001336:	4b64      	ldr	r3, [pc, #400]	; (80014c8 <HAL_RCC_OscConfig+0x4f4>)
 8001338:	6a1b      	ldr	r3, [r3, #32]
 800133a:	4a63      	ldr	r2, [pc, #396]	; (80014c8 <HAL_RCC_OscConfig+0x4f4>)
 800133c:	f023 0304 	bic.w	r3, r3, #4
 8001340:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	68db      	ldr	r3, [r3, #12]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d015      	beq.n	8001376 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800134a:	f7ff fb9f 	bl	8000a8c <HAL_GetTick>
 800134e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001350:	e00a      	b.n	8001368 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001352:	f7ff fb9b 	bl	8000a8c <HAL_GetTick>
 8001356:	4602      	mov	r2, r0
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001360:	4293      	cmp	r3, r2
 8001362:	d901      	bls.n	8001368 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001364:	2303      	movs	r3, #3
 8001366:	e0ab      	b.n	80014c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001368:	4b57      	ldr	r3, [pc, #348]	; (80014c8 <HAL_RCC_OscConfig+0x4f4>)
 800136a:	6a1b      	ldr	r3, [r3, #32]
 800136c:	f003 0302 	and.w	r3, r3, #2
 8001370:	2b00      	cmp	r3, #0
 8001372:	d0ee      	beq.n	8001352 <HAL_RCC_OscConfig+0x37e>
 8001374:	e014      	b.n	80013a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001376:	f7ff fb89 	bl	8000a8c <HAL_GetTick>
 800137a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800137c:	e00a      	b.n	8001394 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800137e:	f7ff fb85 	bl	8000a8c <HAL_GetTick>
 8001382:	4602      	mov	r2, r0
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	f241 3288 	movw	r2, #5000	; 0x1388
 800138c:	4293      	cmp	r3, r2
 800138e:	d901      	bls.n	8001394 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001390:	2303      	movs	r3, #3
 8001392:	e095      	b.n	80014c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001394:	4b4c      	ldr	r3, [pc, #304]	; (80014c8 <HAL_RCC_OscConfig+0x4f4>)
 8001396:	6a1b      	ldr	r3, [r3, #32]
 8001398:	f003 0302 	and.w	r3, r3, #2
 800139c:	2b00      	cmp	r3, #0
 800139e:	d1ee      	bne.n	800137e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80013a0:	7dfb      	ldrb	r3, [r7, #23]
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d105      	bne.n	80013b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013a6:	4b48      	ldr	r3, [pc, #288]	; (80014c8 <HAL_RCC_OscConfig+0x4f4>)
 80013a8:	69db      	ldr	r3, [r3, #28]
 80013aa:	4a47      	ldr	r2, [pc, #284]	; (80014c8 <HAL_RCC_OscConfig+0x4f4>)
 80013ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	69db      	ldr	r3, [r3, #28]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	f000 8081 	beq.w	80014be <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013bc:	4b42      	ldr	r3, [pc, #264]	; (80014c8 <HAL_RCC_OscConfig+0x4f4>)
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f003 030c 	and.w	r3, r3, #12
 80013c4:	2b08      	cmp	r3, #8
 80013c6:	d061      	beq.n	800148c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	69db      	ldr	r3, [r3, #28]
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d146      	bne.n	800145e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013d0:	4b3f      	ldr	r3, [pc, #252]	; (80014d0 <HAL_RCC_OscConfig+0x4fc>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d6:	f7ff fb59 	bl	8000a8c <HAL_GetTick>
 80013da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013dc:	e008      	b.n	80013f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013de:	f7ff fb55 	bl	8000a8c <HAL_GetTick>
 80013e2:	4602      	mov	r2, r0
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d901      	bls.n	80013f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e067      	b.n	80014c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013f0:	4b35      	ldr	r3, [pc, #212]	; (80014c8 <HAL_RCC_OscConfig+0x4f4>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d1f0      	bne.n	80013de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6a1b      	ldr	r3, [r3, #32]
 8001400:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001404:	d108      	bne.n	8001418 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001406:	4b30      	ldr	r3, [pc, #192]	; (80014c8 <HAL_RCC_OscConfig+0x4f4>)
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	492d      	ldr	r1, [pc, #180]	; (80014c8 <HAL_RCC_OscConfig+0x4f4>)
 8001414:	4313      	orrs	r3, r2
 8001416:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001418:	4b2b      	ldr	r3, [pc, #172]	; (80014c8 <HAL_RCC_OscConfig+0x4f4>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6a19      	ldr	r1, [r3, #32]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001428:	430b      	orrs	r3, r1
 800142a:	4927      	ldr	r1, [pc, #156]	; (80014c8 <HAL_RCC_OscConfig+0x4f4>)
 800142c:	4313      	orrs	r3, r2
 800142e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001430:	4b27      	ldr	r3, [pc, #156]	; (80014d0 <HAL_RCC_OscConfig+0x4fc>)
 8001432:	2201      	movs	r2, #1
 8001434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001436:	f7ff fb29 	bl	8000a8c <HAL_GetTick>
 800143a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800143c:	e008      	b.n	8001450 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800143e:	f7ff fb25 	bl	8000a8c <HAL_GetTick>
 8001442:	4602      	mov	r2, r0
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	2b02      	cmp	r3, #2
 800144a:	d901      	bls.n	8001450 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800144c:	2303      	movs	r3, #3
 800144e:	e037      	b.n	80014c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001450:	4b1d      	ldr	r3, [pc, #116]	; (80014c8 <HAL_RCC_OscConfig+0x4f4>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001458:	2b00      	cmp	r3, #0
 800145a:	d0f0      	beq.n	800143e <HAL_RCC_OscConfig+0x46a>
 800145c:	e02f      	b.n	80014be <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800145e:	4b1c      	ldr	r3, [pc, #112]	; (80014d0 <HAL_RCC_OscConfig+0x4fc>)
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001464:	f7ff fb12 	bl	8000a8c <HAL_GetTick>
 8001468:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800146a:	e008      	b.n	800147e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800146c:	f7ff fb0e 	bl	8000a8c <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b02      	cmp	r3, #2
 8001478:	d901      	bls.n	800147e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e020      	b.n	80014c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800147e:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <HAL_RCC_OscConfig+0x4f4>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d1f0      	bne.n	800146c <HAL_RCC_OscConfig+0x498>
 800148a:	e018      	b.n	80014be <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	69db      	ldr	r3, [r3, #28]
 8001490:	2b01      	cmp	r3, #1
 8001492:	d101      	bne.n	8001498 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e013      	b.n	80014c0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001498:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <HAL_RCC_OscConfig+0x4f4>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6a1b      	ldr	r3, [r3, #32]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d106      	bne.n	80014ba <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d001      	beq.n	80014be <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e000      	b.n	80014c0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80014be:	2300      	movs	r3, #0
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3718      	adds	r7, #24
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40021000 	.word	0x40021000
 80014cc:	40007000 	.word	0x40007000
 80014d0:	42420060 	.word	0x42420060

080014d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d101      	bne.n	80014e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e0d0      	b.n	800168a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014e8:	4b6a      	ldr	r3, [pc, #424]	; (8001694 <HAL_RCC_ClockConfig+0x1c0>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0307 	and.w	r3, r3, #7
 80014f0:	683a      	ldr	r2, [r7, #0]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d910      	bls.n	8001518 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014f6:	4b67      	ldr	r3, [pc, #412]	; (8001694 <HAL_RCC_ClockConfig+0x1c0>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f023 0207 	bic.w	r2, r3, #7
 80014fe:	4965      	ldr	r1, [pc, #404]	; (8001694 <HAL_RCC_ClockConfig+0x1c0>)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	4313      	orrs	r3, r2
 8001504:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001506:	4b63      	ldr	r3, [pc, #396]	; (8001694 <HAL_RCC_ClockConfig+0x1c0>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0307 	and.w	r3, r3, #7
 800150e:	683a      	ldr	r2, [r7, #0]
 8001510:	429a      	cmp	r2, r3
 8001512:	d001      	beq.n	8001518 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e0b8      	b.n	800168a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0302 	and.w	r3, r3, #2
 8001520:	2b00      	cmp	r3, #0
 8001522:	d020      	beq.n	8001566 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0304 	and.w	r3, r3, #4
 800152c:	2b00      	cmp	r3, #0
 800152e:	d005      	beq.n	800153c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001530:	4b59      	ldr	r3, [pc, #356]	; (8001698 <HAL_RCC_ClockConfig+0x1c4>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	4a58      	ldr	r2, [pc, #352]	; (8001698 <HAL_RCC_ClockConfig+0x1c4>)
 8001536:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800153a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0308 	and.w	r3, r3, #8
 8001544:	2b00      	cmp	r3, #0
 8001546:	d005      	beq.n	8001554 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001548:	4b53      	ldr	r3, [pc, #332]	; (8001698 <HAL_RCC_ClockConfig+0x1c4>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	4a52      	ldr	r2, [pc, #328]	; (8001698 <HAL_RCC_ClockConfig+0x1c4>)
 800154e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001552:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001554:	4b50      	ldr	r3, [pc, #320]	; (8001698 <HAL_RCC_ClockConfig+0x1c4>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	494d      	ldr	r1, [pc, #308]	; (8001698 <HAL_RCC_ClockConfig+0x1c4>)
 8001562:	4313      	orrs	r3, r2
 8001564:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	2b00      	cmp	r3, #0
 8001570:	d040      	beq.n	80015f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d107      	bne.n	800158a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800157a:	4b47      	ldr	r3, [pc, #284]	; (8001698 <HAL_RCC_ClockConfig+0x1c4>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d115      	bne.n	80015b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e07f      	b.n	800168a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	2b02      	cmp	r3, #2
 8001590:	d107      	bne.n	80015a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001592:	4b41      	ldr	r3, [pc, #260]	; (8001698 <HAL_RCC_ClockConfig+0x1c4>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d109      	bne.n	80015b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e073      	b.n	800168a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015a2:	4b3d      	ldr	r3, [pc, #244]	; (8001698 <HAL_RCC_ClockConfig+0x1c4>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d101      	bne.n	80015b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e06b      	b.n	800168a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015b2:	4b39      	ldr	r3, [pc, #228]	; (8001698 <HAL_RCC_ClockConfig+0x1c4>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f023 0203 	bic.w	r2, r3, #3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	4936      	ldr	r1, [pc, #216]	; (8001698 <HAL_RCC_ClockConfig+0x1c4>)
 80015c0:	4313      	orrs	r3, r2
 80015c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015c4:	f7ff fa62 	bl	8000a8c <HAL_GetTick>
 80015c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ca:	e00a      	b.n	80015e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015cc:	f7ff fa5e 	bl	8000a8c <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80015da:	4293      	cmp	r3, r2
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e053      	b.n	800168a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015e2:	4b2d      	ldr	r3, [pc, #180]	; (8001698 <HAL_RCC_ClockConfig+0x1c4>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f003 020c 	and.w	r2, r3, #12
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d1eb      	bne.n	80015cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015f4:	4b27      	ldr	r3, [pc, #156]	; (8001694 <HAL_RCC_ClockConfig+0x1c0>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0307 	and.w	r3, r3, #7
 80015fc:	683a      	ldr	r2, [r7, #0]
 80015fe:	429a      	cmp	r2, r3
 8001600:	d210      	bcs.n	8001624 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001602:	4b24      	ldr	r3, [pc, #144]	; (8001694 <HAL_RCC_ClockConfig+0x1c0>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f023 0207 	bic.w	r2, r3, #7
 800160a:	4922      	ldr	r1, [pc, #136]	; (8001694 <HAL_RCC_ClockConfig+0x1c0>)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	4313      	orrs	r3, r2
 8001610:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001612:	4b20      	ldr	r3, [pc, #128]	; (8001694 <HAL_RCC_ClockConfig+0x1c0>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0307 	and.w	r3, r3, #7
 800161a:	683a      	ldr	r2, [r7, #0]
 800161c:	429a      	cmp	r2, r3
 800161e:	d001      	beq.n	8001624 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e032      	b.n	800168a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0304 	and.w	r3, r3, #4
 800162c:	2b00      	cmp	r3, #0
 800162e:	d008      	beq.n	8001642 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001630:	4b19      	ldr	r3, [pc, #100]	; (8001698 <HAL_RCC_ClockConfig+0x1c4>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	4916      	ldr	r1, [pc, #88]	; (8001698 <HAL_RCC_ClockConfig+0x1c4>)
 800163e:	4313      	orrs	r3, r2
 8001640:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0308 	and.w	r3, r3, #8
 800164a:	2b00      	cmp	r3, #0
 800164c:	d009      	beq.n	8001662 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800164e:	4b12      	ldr	r3, [pc, #72]	; (8001698 <HAL_RCC_ClockConfig+0x1c4>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	691b      	ldr	r3, [r3, #16]
 800165a:	00db      	lsls	r3, r3, #3
 800165c:	490e      	ldr	r1, [pc, #56]	; (8001698 <HAL_RCC_ClockConfig+0x1c4>)
 800165e:	4313      	orrs	r3, r2
 8001660:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001662:	f000 f821 	bl	80016a8 <HAL_RCC_GetSysClockFreq>
 8001666:	4602      	mov	r2, r0
 8001668:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <HAL_RCC_ClockConfig+0x1c4>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	091b      	lsrs	r3, r3, #4
 800166e:	f003 030f 	and.w	r3, r3, #15
 8001672:	490a      	ldr	r1, [pc, #40]	; (800169c <HAL_RCC_ClockConfig+0x1c8>)
 8001674:	5ccb      	ldrb	r3, [r1, r3]
 8001676:	fa22 f303 	lsr.w	r3, r2, r3
 800167a:	4a09      	ldr	r2, [pc, #36]	; (80016a0 <HAL_RCC_ClockConfig+0x1cc>)
 800167c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800167e:	4b09      	ldr	r3, [pc, #36]	; (80016a4 <HAL_RCC_ClockConfig+0x1d0>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff f9c0 	bl	8000a08 <HAL_InitTick>

  return HAL_OK;
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3710      	adds	r7, #16
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40022000 	.word	0x40022000
 8001698:	40021000 	.word	0x40021000
 800169c:	080017fc 	.word	0x080017fc
 80016a0:	20000000 	.word	0x20000000
 80016a4:	20000004 	.word	0x20000004

080016a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b087      	sub	sp, #28
 80016ac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80016ae:	2300      	movs	r3, #0
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	2300      	movs	r3, #0
 80016b4:	60bb      	str	r3, [r7, #8]
 80016b6:	2300      	movs	r3, #0
 80016b8:	617b      	str	r3, [r7, #20]
 80016ba:	2300      	movs	r3, #0
 80016bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80016be:	2300      	movs	r3, #0
 80016c0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80016c2:	4b1e      	ldr	r3, [pc, #120]	; (800173c <HAL_RCC_GetSysClockFreq+0x94>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f003 030c 	and.w	r3, r3, #12
 80016ce:	2b04      	cmp	r3, #4
 80016d0:	d002      	beq.n	80016d8 <HAL_RCC_GetSysClockFreq+0x30>
 80016d2:	2b08      	cmp	r3, #8
 80016d4:	d003      	beq.n	80016de <HAL_RCC_GetSysClockFreq+0x36>
 80016d6:	e027      	b.n	8001728 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80016d8:	4b19      	ldr	r3, [pc, #100]	; (8001740 <HAL_RCC_GetSysClockFreq+0x98>)
 80016da:	613b      	str	r3, [r7, #16]
      break;
 80016dc:	e027      	b.n	800172e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	0c9b      	lsrs	r3, r3, #18
 80016e2:	f003 030f 	and.w	r3, r3, #15
 80016e6:	4a17      	ldr	r2, [pc, #92]	; (8001744 <HAL_RCC_GetSysClockFreq+0x9c>)
 80016e8:	5cd3      	ldrb	r3, [r2, r3]
 80016ea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d010      	beq.n	8001718 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80016f6:	4b11      	ldr	r3, [pc, #68]	; (800173c <HAL_RCC_GetSysClockFreq+0x94>)
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	0c5b      	lsrs	r3, r3, #17
 80016fc:	f003 0301 	and.w	r3, r3, #1
 8001700:	4a11      	ldr	r2, [pc, #68]	; (8001748 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001702:	5cd3      	ldrb	r3, [r2, r3]
 8001704:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a0d      	ldr	r2, [pc, #52]	; (8001740 <HAL_RCC_GetSysClockFreq+0x98>)
 800170a:	fb02 f203 	mul.w	r2, r2, r3
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	fbb2 f3f3 	udiv	r3, r2, r3
 8001714:	617b      	str	r3, [r7, #20]
 8001716:	e004      	b.n	8001722 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4a0c      	ldr	r2, [pc, #48]	; (800174c <HAL_RCC_GetSysClockFreq+0xa4>)
 800171c:	fb02 f303 	mul.w	r3, r2, r3
 8001720:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	613b      	str	r3, [r7, #16]
      break;
 8001726:	e002      	b.n	800172e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001728:	4b05      	ldr	r3, [pc, #20]	; (8001740 <HAL_RCC_GetSysClockFreq+0x98>)
 800172a:	613b      	str	r3, [r7, #16]
      break;
 800172c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800172e:	693b      	ldr	r3, [r7, #16]
}
 8001730:	4618      	mov	r0, r3
 8001732:	371c      	adds	r7, #28
 8001734:	46bd      	mov	sp, r7
 8001736:	bc80      	pop	{r7}
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	40021000 	.word	0x40021000
 8001740:	007a1200 	.word	0x007a1200
 8001744:	0800180c 	.word	0x0800180c
 8001748:	0800181c 	.word	0x0800181c
 800174c:	003d0900 	.word	0x003d0900

08001750 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001758:	4b0a      	ldr	r3, [pc, #40]	; (8001784 <RCC_Delay+0x34>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a0a      	ldr	r2, [pc, #40]	; (8001788 <RCC_Delay+0x38>)
 800175e:	fba2 2303 	umull	r2, r3, r2, r3
 8001762:	0a5b      	lsrs	r3, r3, #9
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	fb02 f303 	mul.w	r3, r2, r3
 800176a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800176c:	bf00      	nop
  }
  while (Delay --);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	1e5a      	subs	r2, r3, #1
 8001772:	60fa      	str	r2, [r7, #12]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d1f9      	bne.n	800176c <RCC_Delay+0x1c>
}
 8001778:	bf00      	nop
 800177a:	bf00      	nop
 800177c:	3714      	adds	r7, #20
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr
 8001784:	20000000 	.word	0x20000000
 8001788:	10624dd3 	.word	0x10624dd3

0800178c <__libc_init_array>:
 800178c:	b570      	push	{r4, r5, r6, lr}
 800178e:	2600      	movs	r6, #0
 8001790:	4d0c      	ldr	r5, [pc, #48]	; (80017c4 <__libc_init_array+0x38>)
 8001792:	4c0d      	ldr	r4, [pc, #52]	; (80017c8 <__libc_init_array+0x3c>)
 8001794:	1b64      	subs	r4, r4, r5
 8001796:	10a4      	asrs	r4, r4, #2
 8001798:	42a6      	cmp	r6, r4
 800179a:	d109      	bne.n	80017b0 <__libc_init_array+0x24>
 800179c:	f000 f822 	bl	80017e4 <_init>
 80017a0:	2600      	movs	r6, #0
 80017a2:	4d0a      	ldr	r5, [pc, #40]	; (80017cc <__libc_init_array+0x40>)
 80017a4:	4c0a      	ldr	r4, [pc, #40]	; (80017d0 <__libc_init_array+0x44>)
 80017a6:	1b64      	subs	r4, r4, r5
 80017a8:	10a4      	asrs	r4, r4, #2
 80017aa:	42a6      	cmp	r6, r4
 80017ac:	d105      	bne.n	80017ba <__libc_init_array+0x2e>
 80017ae:	bd70      	pop	{r4, r5, r6, pc}
 80017b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80017b4:	4798      	blx	r3
 80017b6:	3601      	adds	r6, #1
 80017b8:	e7ee      	b.n	8001798 <__libc_init_array+0xc>
 80017ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80017be:	4798      	blx	r3
 80017c0:	3601      	adds	r6, #1
 80017c2:	e7f2      	b.n	80017aa <__libc_init_array+0x1e>
 80017c4:	08001820 	.word	0x08001820
 80017c8:	08001820 	.word	0x08001820
 80017cc:	08001820 	.word	0x08001820
 80017d0:	08001824 	.word	0x08001824

080017d4 <memset>:
 80017d4:	4603      	mov	r3, r0
 80017d6:	4402      	add	r2, r0
 80017d8:	4293      	cmp	r3, r2
 80017da:	d100      	bne.n	80017de <memset+0xa>
 80017dc:	4770      	bx	lr
 80017de:	f803 1b01 	strb.w	r1, [r3], #1
 80017e2:	e7f9      	b.n	80017d8 <memset+0x4>

080017e4 <_init>:
 80017e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017e6:	bf00      	nop
 80017e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017ea:	bc08      	pop	{r3}
 80017ec:	469e      	mov	lr, r3
 80017ee:	4770      	bx	lr

080017f0 <_fini>:
 80017f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017f2:	bf00      	nop
 80017f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017f6:	bc08      	pop	{r3}
 80017f8:	469e      	mov	lr, r3
 80017fa:	4770      	bx	lr
